/**
 * CORRE√á√ÉO CONSERVADORA - CONVERTER IDs TEMPOR√ÅRIOS PARA REAIS
 * Apenas converte IDs existentes sem modificar outras funcionalidades
 */

(function() {
    console.log('üîß CORRE√á√ÉO CONSERVADORA - Convertendo IDs tempor√°rios...');
    
    setTimeout(function() {
        
        // ===== FUN√á√ÉO PARA CONVERTER IDs TEMPOR√ÅRIOS =====
        function converterIdsTemporarios() {
            console.log('üîÑ Verificando e convertendo IDs tempor√°rios...');
            
            // Verificar se h√° lotes com IDs tempor√°rios
            let precisaConversao = false;
            
            if (window.lotesData?.porData) {
                window.lotesData.porData.forEach(lote => {
                    if (typeof lote.id === 'string' && lote.id.includes('lote_data_')) {
                        console.log('üìÖ Encontrado ID tempor√°rio para convers√£o:', lote.id);
                        precisaConversao = true;
                    }
                });
            }
            
            if (window.lotesData?.porPercentual) {
                window.lotesData.porPercentual.forEach(lote => {
                    if (typeof lote.id === 'string' && (lote.id.includes('lote_perc_') || lote.id.includes('lote_percentual_'))) {
                        console.log('üìä Encontrado ID tempor√°rio para convers√£o:', lote.id);
                        precisaConversao = true;
                    }
                });
            }
            
            if (precisaConversao) {
                console.log('‚ö†Ô∏è IDs tempor√°rios detectados. Iniciando processo de convers√£o...');
                buscarLotesDoBackend();
            } else {
                console.log('‚úÖ Todos os IDs j√° s√£o reais');
            }
        }
        
        // ===== BUSCAR LOTES REAIS DO BACKEND =====
        async function buscarLotesDoBackend() {
            try {
                const eventoId = window.getEventoId?.() || 
                               new URLSearchParams(window.location.search).get('evento_id') ||
                               window.eventoAtual?.id;
                
                if (!eventoId) {
                    console.error('‚ùå ID do evento n√£o encontrado para convers√£o');
                    return;
                }
                
                console.log('üì° Buscando lotes reais do backend...');
                
                const response = await fetch('/produtor/ajax/wizard_evento.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `action=retomar_evento&evento_id=${eventoId}`
                });
                
                const result = await response.json();
                
                if (result.sucesso && result.lotes) {
                    console.log('‚úÖ Lotes reais recebidos do backend:', result.lotes);
                    substituirIdsTemporarios(result.lotes);
                } else {
                    console.error('‚ùå Erro ao buscar lotes do backend:', result);
                }
                
            } catch (error) {
                console.error('‚ùå Erro na requisi√ß√£o ao backend:', error);
            }
        }
        
        // ===== SUBSTITUIR IDs TEMPOR√ÅRIOS PELOS REAIS =====
        function substituirIdsTemporarios(lotesReais) {
            console.log('üîÑ Substituindo IDs tempor√°rios pelos reais...');
            
            // Mapear lotes por caracter√≠sticas para encontrar correspond√™ncias
            const lotesData = lotesReais.filter(l => l.tipo === 'data');
            const lotesPercentual = lotesReais.filter(l => l.tipo === 'percentual');
            
            // Substituir lotes por data
            if (window.lotesData?.porData) {
                window.lotesData.porData.forEach((loteLocal, index) => {
                    if (typeof loteLocal.id === 'string' && loteLocal.id.includes('lote_data_')) {
                        // Tentar encontrar correspond√™ncia por datas
                        const loteReal = lotesData.find(lr => 
                            lr.data_inicio === loteLocal.dataInicio && 
                            lr.data_fim === loteLocal.dataFim
                        );
                        
                        if (loteReal) {
                            console.log(`üîÑ Convertendo lote por data: ${loteLocal.id} ‚Üí ${loteReal.id}`);
                            window.lotesData.porData[index].id = parseInt(loteReal.id);
                        }
                    }
                });
            }
            
            // Substituir lotes por percentual
            if (window.lotesData?.porPercentual) {
                window.lotesData.porPercentual.forEach((loteLocal, index) => {
                    if (typeof loteLocal.id === 'string' && (loteLocal.id.includes('lote_perc_') || loteLocal.id.includes('lote_percentual_'))) {
                        // Tentar encontrar correspond√™ncia por percentual
                        const loteReal = lotesPercentual.find(lr => 
                            parseInt(lr.percentual_venda) === parseInt(loteLocal.percentual)
                        );
                        
                        if (loteReal) {
                            console.log(`üîÑ Convertendo lote percentual: ${loteLocal.id} ‚Üí ${loteReal.id}`);
                            window.lotesData.porPercentual[index].id = parseInt(loteReal.id);
                        }
                    }
                });
            }
            
            // Re-renderizar interface com IDs corretos
            console.log('üñºÔ∏è Re-renderizando interface com IDs corretos...');
            if (window.renderizarInterfaceComBotoes) {
                window.renderizarInterfaceComBotoes();
            } else if (window.atualizarTelaLotes) {
                window.atualizarTelaLotes();
            } else {
                if (window.renderizarLotesPorData) window.renderizarLotesPorData();
                if (window.renderizarLotesPorPercentual) window.renderizarLotesPorPercentual();
            }
            
            console.log('‚úÖ Convers√£o de IDs conclu√≠da!');
            verificarConversao();
        }
        
        // ===== VERIFICAR SE CONVERS√ÉO FOI BEM-SUCEDIDA =====
        function verificarConversao() {
            console.log('üîç Verificando resultado da convers√£o...');
            
            let todosConvertidos = true;
            
            if (window.lotesData?.porData) {
                window.lotesData.porData.forEach(lote => {
                    if (typeof lote.id === 'string') {
                        console.log('‚ö†Ô∏è ID ainda tempor√°rio (data):', lote.id);
                        todosConvertidos = false;
                    }
                });
            }
            
            if (window.lotesData?.porPercentual) {
                window.lotesData.porPercentual.forEach(lote => {
                    if (typeof lote.id === 'string') {
                        console.log('‚ö†Ô∏è ID ainda tempor√°rio (percentual):', lote.id);
                        todosConvertidos = false;
                    }
                });
            }
            
            if (todosConvertidos) {
                console.log('‚úÖ TODOS OS IDs FORAM CONVERTIDOS PARA REAIS!');
                console.log('üìÖ Lotes por data:', window.lotesData?.porData?.map(l => ({ id: l.id, tipo: typeof l.id })));
                console.log('üìä Lotes por percentual:', window.lotesData?.porPercentual?.map(l => ({ id: l.id, tipo: typeof l.id })));
            } else {
                console.log('‚ùå Alguns IDs ainda s√£o tempor√°rios. Pode ser necess√°rio recarregar a p√°gina.');
            }
        }
        
        // ===== EXECUTAR CONVERS√ÉO =====
        converterIdsTemporarios();
        
        // Fun√ß√£o de teste para verificar
        window.verificarConversaoIds = function() {
            console.clear();
            console.log('üîç === VERIFICA√á√ÉO DE CONVERS√ÉO DE IDs ===');
            verificarConversao();
        };
        
        console.log('‚úÖ Corre√ß√£o conservadora carregada');
        console.log('üí° Use verificarConversaoIds() para verificar status');
        
    }, 2000); // Aguardar outros scripts carregarem
    
})();
