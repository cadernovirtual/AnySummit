/**
 * Corre√ß√£o espec√≠fica para quando est√° retomando um rascunho
 * Garante que o currentStep seja 1 e n√£o 5
 */

(function() {
    'use strict';
    
    console.log('üîß Corre√ß√£o para retomar rascunho ativada');
    
    // Verificar se est√° retomando um evento (tem evento_id na URL)
    const urlParams = new URLSearchParams(window.location.search);
    const eventoId = urlParams.get('evento_id');
    
    if (eventoId) {
        console.log('üìã Retomando evento ID:', eventoId);
        
        // For√ßar currentStep = 1 v√°rias vezes
        function forcarStep1Retomada() {
            if (window.setCurrentStep) {
                window.setCurrentStep(1);
                console.log('‚úÖ currentStep for√ßado para 1');
            } else {
                window.currentStep = 1;
                console.log('‚úÖ currentStep definido diretamente como 1');
            }
        }
        
        // Executar em diferentes momentos
        setTimeout(forcarStep1Retomada, 100);
        setTimeout(forcarStep1Retomada, 500);
        setTimeout(forcarStep1Retomada, 1000);
        
        // Interceptar nextStep para garantir que use o step correto
        setTimeout(() => {
            console.log('üîç Verificando se nextStep existe...');
            
            if (!window.nextStep) {
                console.warn('‚ö†Ô∏è nextStep n√£o existe! Aguardando...');
                setTimeout(arguments.callee, 500);
                return;
            }
            
            console.log('‚úÖ nextStep encontrado, interceptando...');
            const originalNextStep = window.nextStep;
            let primeiroNext = true;
            
            window.nextStep = function() {
                if (primeiroNext && eventoId) {
                    primeiroNext = false;
                    
                    // For√ßar currentStep = 1
                    if (window.setCurrentStep) {
                        window.setCurrentStep(1);
                    }
                    
                    console.log('üöÄ Primeiro nextStep ap√≥s retomar - for√ßando step 1');
                    return; // N√£o prosseguir no primeiro clique
                }
                
                // Chamar fun√ß√£o original
                return originalNextStep.apply(this, arguments);
            };
            
            console.log('‚úÖ nextStep interceptado com sucesso');
        }, 1000);
    }
    
})();
