/**
 * CONTROLE DE LIMITE DE VENDAS - EXCLUS√ÉO AUTOM√ÅTICA DE LOTES
 */

console.log('üéõÔ∏è CONTROLE-LIMITE-VENDAS.JS CARREGANDO...');

/**
 * Fun√ß√£o espec√≠fica para o onchange do checkbox (CORRE√á√ÉO PROBLEMA 1)
 */
window.handleControleVendasChange = async function(event) {
    const isChecked = event.target.checked;
    console.log('üéõÔ∏è [ONCHANGE] Controle de limite alterado:', isChecked ? 'ATIVADO' : 'DESATIVADO');
    
    // CORRE√á√ÉO PROBLEMA 1: Controlar visibilidade do campo lota√ß√£o m√°xima
    controlarVisibilidadeLotacaoMaxima(isChecked);
    
    if (!isChecked) {
        // CORRE√á√ÉO: Bloquear mudan√ßa do checkbox at√© decis√£o
        event.preventDefault();
        event.target.checked = true; // Manter marcado temporariamente
        
        console.log('üîç Verificando se pode desmarcar checkbox...');
        
        // Verificar se h√° lotes por quantidade
        await verificarEPermitirDesmarcacao(event.target);
    }
};

/**
 * CORRE√á√ÉO PROBLEMA 1: Controlar visibilidade dos campos de lota√ß√£o m√°xima
 */
function controlarVisibilidadeLotacaoMaxima(mostrar) {
    console.log('üëÅÔ∏è Controlando visibilidade dos campos de lota√ß√£o:', mostrar ? 'MOSTRAR' : 'ESCONDER');
    
    const campoLimite = document.getElementById('campoLimiteVendas');
    const btnConfirmar = document.getElementById('btnConfirmarLimite');
    
    if (campoLimite) {
        campoLimite.style.display = mostrar ? 'block' : 'none';
        console.log('üì± Campo limite vendas:', mostrar ? 'vis√≠vel' : 'escondido');
    }
    
    if (btnConfirmar) {
        btnConfirmar.style.display = mostrar ? 'inline-block' : 'none';
        console.log('üîò Bot√£o confirmar:', mostrar ? 'vis√≠vel' : 'escondido');
    }
}

/**
 * CORRE√á√ÉO PROBLEMA 1: Aplicar visibilidade na carga inicial
 */
function aplicarVisibilidadeInicial() {
    console.log('üîÑ Aplicando visibilidade inicial dos campos...');
    
    setTimeout(() => {
        const checkbox = document.getElementById('controlar_limite_vendas');
        if (checkbox) {
            const isChecked = checkbox.checked;
            console.log('üìã Estado inicial do checkbox:', isChecked);
            controlarVisibilidadeLotacaoMaxima(isChecked);
        } else {
            console.warn('‚ö†Ô∏è Checkbox n√£o encontrado para aplicar visibilidade inicial');
        }
    }, 500);
}

/**
 * Verificar se pode desmarcar e gerenciar processo
 */
async function verificarEPermitirDesmarcacao(checkbox) {
    console.log('üîç Verificando lotes por quantidade e ingressos...');
    
    try {
        // Carregar lotes do banco
        let lotes = [];
        if (typeof window.carregarLotesDoBanco === 'function') {
            lotes = await window.carregarLotesDoBanco();
        }
        
        const lotesPorQuantidade = lotes.filter(l => l.tipo === 'quantidade' || l.tipo === 'percentual');
        
        if (lotesPorQuantidade.length === 0) {
            console.log('‚úÖ Nenhum lote por quantidade - pode desmarcar');
            checkbox.checked = false;
            controlarVisibilidadeLotacaoMaxima(false);
            return;
        }
        
        console.log(`üìä Encontrados ${lotesPorQuantidade.length} lotes por quantidade:`, lotesPorQuantidade);
        
        // Verificar se h√° ingressos relacionados a esses lotes
        let temIngressos = false;
        for (const lote of lotesPorQuantidade) {
            try {
                const resultado = await verificarIngressosNoLote(lote.id);
                if (resultado) {
                    temIngressos = true;
                    break;
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è Erro ao verificar ingressos do lote ${lote.id}:`, error);
            }
        }
        
        if (temIngressos) {
            // Se h√° ingressos, mostrar mensagem e manter marcado
            console.log('‚ùå Existem ingressos relacionados aos lotes por quantidade');
            
            // CORRE√á√ÉO PROBLEMA 2: Aguardar dialog de forma s√≠ncrona
            await mostrarDialogSincrono('Para desmarcar essa op√ß√£o ser√° necess√°rio excluir todos os ingressos e lotes controlados pela quantidade de vendas. Voc√™ precisa excluir esses ingressos e os lotes.', 'OK');
            
            // Manter checkbox marcado - RETURN AQUI para sair da fun√ß√£o
            checkbox.checked = true;
            controlarVisibilidadeLotacaoMaxima(true);
            console.log('üîí Checkbox mantido marcado - h√° ingressos');
            return; // IMPORTANTE: Sair da fun√ß√£o aqui
        }
        
        // Se n√£o h√° ingressos, perguntar se quer excluir lotes
        const nomes = lotesPorQuantidade.map(l => l.nome).join(', ');
        
        // CORRE√á√ÉO PROBLEMA 2: Aguardar confirma√ß√£o de forma s√≠ncrona
        const confirmacao = await mostrarDialogSincrono(
            `Para desmarcar o controle de limite ser√° necess√°rio excluir os seguintes lotes por quantidade:\n\n` +
            `${nomes}\n\n` +
            `Deseja continuar e excluir esses lotes?`,
            'CONFIRMAR_CANCELAR'
        );
        
        if (!confirmacao) {
            console.log('‚ùå Usu√°rio cancelou - mantendo checkbox marcado');
            checkbox.checked = true;
            controlarVisibilidadeLotacaoMaxima(true);
            return; // IMPORTANTE: Sair da fun√ß√£o aqui quando cancelar
        }
        
        console.log('‚úÖ Confirma√ß√£o recebida - prosseguindo com exclus√£o dos lotes');
        
        // S√≥ chega aqui se o usu√°rio realmente confirmou a exclus√£o
        // Excluir cada lote por quantidade
        for (const lote of lotesPorQuantidade) {
            try {
                console.log(`üóëÔ∏è Excluindo lote ${lote.nome} (ID: ${lote.id})`);
                
                if (typeof window.fazerRequisicaoAPI === 'function') {
                    await window.fazerRequisicaoAPI('excluir_lote_especifico', {
                        lote_id: lote.id
                    });
                } else {
                    await fazerRequisicaoAPILocal('excluir_lote_especifico', {
                        lote_id: lote.id
                    });
                }
                
                console.log(`‚úÖ Lote ${lote.nome} exclu√≠do com sucesso`);
                
            } catch (error) {
                console.error(`‚ùå Erro ao excluir lote ${lote.nome}:`, error);
            }
        }
        
        // Renomear lotes restantes
        console.log('üîÑ Renomeando lotes restantes...');
        try {
            if (typeof window.fazerRequisicaoAPI === 'function') {
                await window.fazerRequisicaoAPI('renomear_lotes_sequencial');
            } else {
                await fazerRequisicaoAPILocal('renomear_lotes_sequencial');
            }
            console.log('‚úÖ Lotes renomeados sequencialmente');
        } catch (error) {
            console.error('‚ùå Erro na renomea√ß√£o:', error);
        }
        
        // CORRE√á√ÉO: S√≥ desmarca se chegou at√© aqui (usu√°rio confirmou)
        checkbox.checked = false;
        console.log('‚úÖ Checkbox desmarcado ap√≥s exclus√£o bem-sucedida');
        
        // CORRE√á√ÉO: Esconder controles de limita√ß√£o ap√≥s exclus√£o
        controlarVisibilidadeLotacaoMaxima(false);
        
        // Invalidar cache e atualizar interface
        if (typeof window.invalidarCacheLotes === 'function') {
            window.invalidarCacheLotes();
        }
        
        if (typeof window.renderizarLotesUnificado === 'function') {
            setTimeout(() => {
                window.renderizarLotesUnificado();
            }, 500);
        }
        
        console.log('‚úÖ Processo de desmarca√ß√£o conclu√≠do com sucesso');
        
    } catch (error) {
        console.error('‚ùå Erro na verifica√ß√£o/exclus√£o de lotes por quantidade:', error);
        await mostrarDialogSincrono('Erro ao processar lotes por quantidade: ' + error.message, 'OK');
        checkbox.checked = true; // Manter marcado em caso de erro
        controlarVisibilidadeLotacaoMaxima(true);
    }
}

/**
 * CORRE√á√ÉO PROBLEMA 2: Dialog s√≠ncrono que PARA tudo at√© ter resposta
 */
function mostrarDialogSincrono(mensagem, tipo = 'OK') {
    return new Promise((resolve) => {
        console.log('üõë PARANDO TUDO - aguardando resposta do dialog...');
        
        if (tipo === 'OK') {
            // Apenas informa√ß√£o
            alert(mensagem);
            console.log('‚úÖ Dialog OK confirmado');
            resolve(true);
        } else if (tipo === 'CONFIRMAR_CANCELAR') {
            // Confirma√ß√£o sim/n√£o
            const resultado = confirm(mensagem);
            console.log('‚úÖ Dialog confirma√ß√£o respondido:', resultado ? 'CONFIRMOU' : 'CANCELOU');
            resolve(resultado);
        }
    });
}

/**
 * Esconder controles de limita√ß√£o quando checkbox desmarcado
 */
function esconderControlesLimitacao() {
    console.log('üëÅÔ∏è Escondendo controles de limita√ß√£o...');
    
    // Esconder campo de limite m√°ximo
    const limiteField = document.getElementById('limiteVendasField');
    if (limiteField) {
        limiteField.style.display = 'none';
        console.log('‚úÖ Campo limite vendas escondido');
    }
    
    // Esconder qualquer outro controle relacionado
    const limiteInput = document.getElementById('limite_vendas');
    if (limiteInput) {
        limiteInput.value = '';
        console.log('‚úÖ Valor limite vendas limpo');
    }
}

/**
 * Monitorar mudan√ßas no checkbox de controle de limite
 */
function monitorarControleVendasCheckbox() {
    const checkbox = document.getElementById('controlar_limite_vendas');
    
    if (!checkbox) {
        console.warn('‚ö†Ô∏è Checkbox controlar_limite_vendas n√£o encontrado');
        return;
    }
    
    console.log('‚úÖ Monitoramento do checkbox de controle iniciado');
    
    // Fun√ß√£o para lidar com mudan√ßas
    async function handleControleChange(event) {
        const isChecked = event.target.checked;
        console.log('üéõÔ∏è Controle de limite alterado:', isChecked ? 'ATIVADO' : 'DESATIVADO');
        
        if (!isChecked) {
            // Quando desmarcado, verificar se h√° lotes por quantidade
            await verificarEExcluirLotesQuantidade();
        }
    }
    
    // Adicionar listener (al√©m do onclick)
    checkbox.addEventListener('change', handleControleChange);
    
    console.log('üëÇ Event listener adicionado ao checkbox');
}

/**
 * Verificar se h√° lotes por quantidade e ingressos relacionados
 */
async function verificarEExcluirLotesQuantidade() {
    console.log('üîç Verificando lotes por quantidade e ingressos...');
    
    try {
        // Carregar lotes do banco
        let lotes = [];
        if (typeof window.carregarLotesDoBanco === 'function') {
            lotes = await window.carregarLotesDoBanco();
        }
        
        const lotesPorQuantidade = lotes.filter(l => l.tipo === 'quantidade' || l.tipo === 'percentual');
        
        if (lotesPorQuantidade.length === 0) {
            console.log('‚úÖ Nenhum lote por quantidade encontrado');
            return;
        }
        
        console.log(`üìä Encontrados ${lotesPorQuantidade.length} lotes por quantidade:`, lotesPorQuantidade);
        
        // Verificar se h√° ingressos relacionados a esses lotes
        let temIngressos = false;
        for (const lote of lotesPorQuantidade) {
            try {
                const resultado = await verificarIngressosNoLote(lote.id);
                if (resultado) {
                    temIngressos = true;
                    break;
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è Erro ao verificar ingressos do lote ${lote.id}:`, error);
            }
        }
        
        if (temIngressos) {
            // Se h√° ingressos, mostrar mensagem de erro e reativar checkbox
            console.log('‚ùå Existem ingressos relacionados aos lotes por quantidade');
            
            alert('Para desmarcar essa op√ß√£o ser√° necess√°rio excluir todos os ingressos e lotes controlados pela quantidade de vendas. Voc√™ precisa excluir esses ingressos e os lotes.');
            
            // Reativar o checkbox
            const checkbox = document.getElementById('controlar_limite_vendas');
            if (checkbox) {
                checkbox.checked = true;
            }
            return;
        }
        
        // Se n√£o h√° ingressos, prosseguir com confirma√ß√£o
        const nomes = lotesPorQuantidade.map(l => l.nome).join(', ');
        const confirmacao = confirm(
            `O controle de limite de vendas foi desativado.\n\n` +
            `Existem ${lotesPorQuantidade.length} lote(s) por quantidade que ser√£o automaticamente exclu√≠dos:\n` +
            `${nomes}\n\n` +
            `Deseja continuar?`
        );
        
        if (!confirmacao) {
            console.log('‚ùå Usu√°rio cancelou - reativando controle');
            // Reativar o checkbox
            const checkbox = document.getElementById('controlar_limite_vendas');
            if (checkbox) {
                checkbox.checked = true;
            }
            return;
        }
        
        console.log('‚úÖ Confirma√ß√£o recebida - excluindo lotes por quantidade');
        
        // Excluir cada lote por quantidade
        for (const lote of lotesPorQuantidade) {
            try {
                console.log(`üóëÔ∏è Excluindo lote ${lote.nome} (ID: ${lote.id})`);
                
                // Usar fun√ß√£o global exportada
                if (typeof window.fazerRequisicaoAPI === 'function') {
                    await window.fazerRequisicaoAPI('excluir_lote_especifico', {
                        lote_id: lote.id
                    });
                } else {
                    await fazerRequisicaoAPILocal('excluir_lote_especifico', {
                        lote_id: lote.id
                    });
                }
                
                console.log(`‚úÖ Lote ${lote.nome} exclu√≠do com sucesso`);
                
            } catch (error) {
                console.error(`‚ùå Erro ao excluir lote ${lote.nome}:`, error);
            }
        }
        
        // Renomear lotes restantes
        console.log('üîÑ Renomeando lotes restantes...');
        try {
            if (typeof window.fazerRequisicaoAPI === 'function') {
                await window.fazerRequisicaoAPI('renomear_lotes_sequencial');
            } else {
                await fazerRequisicaoAPILocal('renomear_lotes_sequencial');
            }
            console.log('‚úÖ Lotes renomeados sequencialmente');
        } catch (error) {
            console.error('‚ùå Erro na renomea√ß√£o:', error);
        }
        
        // Invalidar cache e atualizar interface
        if (typeof window.invalidarCacheLotes === 'function') {
            window.invalidarCacheLotes();
        }
        
        if (typeof window.renderizarLotesUnificado === 'function') {
            setTimeout(() => {
                window.renderizarLotesUnificado();
            }, 500);
        }
        
        console.log('‚úÖ Exclus√£o autom√°tica de lotes por quantidade conclu√≠da');
        
    } catch (error) {
        console.error('‚ùå Erro na verifica√ß√£o/exclus√£o de lotes por quantidade:', error);
        alert('Erro ao processar lotes por quantidade: ' + error.message);
    }
}

/**
 * Verificar se h√° ingressos associados ao lote
 */
async function verificarIngressosNoLote(loteId) {
    console.log('üîç Verificando ingressos no lote:', loteId);
    
    const eventoId = new URLSearchParams(window.location.search).get('evento_id');
    
    if (!eventoId) {
        // Modo novo evento: verificar ingressos tempor√°rios
        if (window.temporaryTickets?.tickets) {
            const temIngresso = window.temporaryTickets.tickets.some(ticket => 
                ticket.loteId === loteId || ticket.lote_id === loteId
            );
            console.log('üìä Ingressos tempor√°rios:', temIngresso ? 'encontrados' : 'n√£o encontrados');
            return temIngresso;
        }
        return false;
    }
    
    try {
        const resultado = await fazerRequisicaoAPILocal('verificar_ingressos_lote', {
            lote_id: loteId
        });
        
        const temIngressos = resultado.tem_ingressos || false;
        console.log('üìä Ingressos no banco:', temIngressos ? 'encontrados' : 'n√£o encontrados');
        
        return temIngressos;
    } catch (error) {
        console.error('‚ùå Erro ao verificar ingressos:', error);
        return false; // Em caso de erro, assumir que n√£o h√° ingressos
    }
}

/**
 * Fun√ß√£o para fazer requisi√ß√µes √† API (implementa√ß√£o local)
 */
async function fazerRequisicaoAPILocal(action, dados = {}) {
    const eventoId = new URLSearchParams(window.location.search).get('evento_id');
    
    const body = new URLSearchParams({
        action,
        evento_id: eventoId || '',
        ...dados
    });
    
    const response = await fetch('/produtor/ajax/wizard_evento.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: body
    });
    
    if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const textResponse = await response.text();
    
    // Tentar extrair JSON
    let jsonData = null;
    try {
        jsonData = JSON.parse(textResponse);
    } catch (parseError) {
        const lines = textResponse.split('\n');
        for (let line of lines) {
            line = line.trim();
            if (line.startsWith('{') && line.endsWith('}')) {
                try {
                    jsonData = JSON.parse(line);
                    break;
                } catch (e) {
                    continue;
                }
            }
        }
        
        if (!jsonData) {
            throw new Error('Resposta da API n√£o cont√©m JSON v√°lido');
        }
    }
    
    if (!jsonData.sucesso) {
        throw new Error(jsonData.erro || 'Erro desconhecido na API');
    }
    
    return jsonData;
}

// Inicializar monitoramento quando DOM estiver pronto
function inicializarControleVendas() {
    console.log('üöÄ Inicializando controle de limite de vendas...');
    
    // Verificar se fun√ß√£o global est√° dispon√≠vel
    console.log('üîç Verificando fun√ß√£o global fazerRequisicaoAPI:', typeof window.fazerRequisicaoAPI);
    
    // Aguardar um pouco para garantir que outros scripts carregaram
    setTimeout(() => {
        console.log('üîç Verificando novamente fun√ß√£o global fazerRequisicaoAPI:', typeof window.fazerRequisicaoAPI);
        monitorarControleVendasCheckbox();
    }, 1000);
}

// Auto-inicializar
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', inicializarControleVendas);
} else {
    inicializarControleVendas();
}

// CORRE√á√ÉO PROBLEMA 1: Aplicar visibilidade inicial tamb√©m
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', aplicarVisibilidadeInicial);
} else {
    aplicarVisibilidadeInicial();
}

console.log('‚úÖ CONTROLE-LIMITE-VENDAS.JS CARREGADO!');
console.log('üîß Funcionalidades:');
console.log('  - Monitora checkbox controlar_limite_vendas');
console.log('  - Exclui automaticamente lotes por quantidade quando desmarcado');
console.log('  - Renomeia lotes restantes sequencialmente');
