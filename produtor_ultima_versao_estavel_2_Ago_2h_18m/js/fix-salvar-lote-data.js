/**
 * FIX: Erro "salvarLoteData is not defined"
 * 
 * PROBLEMA RESOLVIDO:
 * - Fun√ß√£o salvarLoteData n√£o estava dispon√≠vel globalmente
 * - Modal de edi√ß√£o de lote chamava fun√ß√£o inexistente
 */

document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Fix para salvarLoteData carregado');
    
    // =======================================================
    // VERIFICAR E CRIAR FUN√á√ÉO salvarLoteData SE N√ÉO EXISTIR
    // =======================================================
    
    setTimeout(() => {
        if (typeof window.salvarLoteData !== 'function') {
            console.log('‚ö†Ô∏è Fun√ß√£o salvarLoteData n√£o encontrada, criando implementa√ß√£o...');
            
            window.salvarLoteData = function() {
                console.log('üíæ [FIX] Salvando edi√ß√£o de lote por data...');
                
                try {
                    // COLETAR DADOS DO MODAL
                    const id = document.getElementById('editLoteDataId')?.value;
                    
                    // CORRE√á√ÉO: Buscar nome original do lote, n√£o for√ßar "Lote Editado"
                    let nome = document.getElementById('editLoteDataNome')?.value;
                    if (!nome || nome.trim() === '') {
                        // Se n√£o h√° campo nome ou est√° vazio, manter nome original
                        const loteOriginal = window.lotesData?.porData?.find(l => l.id == id);
                        nome = loteOriginal?.nome || `Lote por Data ${id}`;
                        console.log('üìù Nome n√£o informado, usando:', nome);
                    }
                    
                    const dataInicio = document.getElementById('editLoteDataInicio')?.value;
                    const dataFim = document.getElementById('editLoteDataFim')?.value;
                    const divulgar = document.getElementById('editLoteDataDivulgar')?.checked || false;
                    
                    console.log('üìä Dados coletados:', { id, nome, dataInicio, dataFim, divulgar });
                    
                    // VALIDA√á√ïES
                    if (!id) {
                        alert('Erro: ID do lote n√£o encontrado');
                        return;
                    }
                    
                    if (!dataInicio || !dataFim) {
                        alert('Por favor, preencha as datas de in√≠cio e fim');
                        return;
                    }
                    
                    // Verificar se as datas s√£o v√°lidas
                    const dataInicioObj = new Date(dataInicio);
                    const dataFimObj = new Date(dataFim);
                    
                    if (isNaN(dataInicioObj.getTime()) || isNaN(dataFimObj.getTime())) {
                        alert('Datas inv√°lidas. Verifique o formato das datas.');
                        return;
                    }
                    
                    if (dataInicioObj >= dataFimObj) {
                        alert('A data de fim deve ser posterior √† data de in√≠cio');
                        return;
                    }
                    
                    // SALVAR NO BANCO
                    salvarLoteNoBanco({
                        id: parseInt(id),
                        nome: nome,
                        tipo: 'data',
                        data_inicio: dataInicio,
                        data_fim: dataFim,
                        divulgar_criterio: divulgar
                    });
                    
                } catch (error) {
                    console.error('‚ùå Erro ao salvar lote:', error);
                    alert('Erro interno. Verifique o console para mais detalhes.');
                }
            };
            
            console.log('‚úÖ Fun√ß√£o salvarLoteData criada');
            
        } else {
            console.log('‚úÖ Fun√ß√£o salvarLoteData j√° existe');
        }
        
        // VERIFICAR OUTRAS FUN√á√ïES DE LOTE
        verificarFuncoesLote();
        
    }, 1000);
    
    // =======================================================
    // FUN√á√ÉO AUXILIAR PARA SALVAR NO BANCO
    // =======================================================
    
    async function salvarLoteNoBanco(dadosLote) {
        try {
            const eventoId = new URLSearchParams(window.location.search).get('evento_id');
            
            const dadosEnvio = {
                action: 'salvar_lote',
                evento_id: eventoId,
                id: dadosLote.id, // Para UPDATE
                nome: dadosLote.nome,
                tipo: dadosLote.tipo,
                data_inicio: dadosLote.data_inicio,
                data_fim: dadosLote.data_fim,
                divulgar_criterio: dadosLote.divulgar_criterio ? 1 : 0
            };
            
            console.log('üì§ Enviando dados do lote para API:', dadosEnvio);
            
            const response = await fetch('/produtor/ajax/wizard_evento.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams(dadosEnvio).toString()
            });
            
            const resultado = await response.json();
            console.log('üì• Resposta da API:', resultado);
            
            if (resultado.sucesso) {
                alert('Lote salvo com sucesso!');
                
                // FECHAR MODAL
                if (window.closeModal) {
                    window.closeModal('editLoteDataModal');
                }
                
                // CORRE√á√ÉO: N√ÉO recarregar nada para preservar interface
                console.log('‚úÖ Lote salvo com sucesso - interface preservada');
                // N√ÉO chama atualizarListaLotes() que estava limpando a tela
                
            } else {
                console.error('‚ùå Erro na API:', resultado.erro);
                alert('Erro ao salvar: ' + (resultado.erro || 'Erro desconhecido'));
            }
            
        } catch (error) {
            console.error('‚ùå Erro na requisi√ß√£o:', error);
            alert('Erro de conex√£o. Tente novamente.');
        }
    }
    
    // =======================================================
    // VERIFICAR OUTRAS FUN√á√ïES DE LOTE
    // =======================================================
    
    function verificarFuncoesLote() {
        const funcoesNecessarias = [
            'salvarLotePercentual',
            'editarLoteData', 
            'editarLotePercentual',
            'excluirLoteData',
            'excluirLotePercentual'
        ];
        
        funcoesNecessarias.forEach(nomeFuncao => {
            if (typeof window[nomeFuncao] !== 'function') {
                console.warn(`‚ö†Ô∏è Fun√ß√£o ${nomeFuncao} n√£o encontrada`);
                
                // Criar stub para evitar erros
                window[nomeFuncao] = function() {
                    alert(`Fun√ß√£o ${nomeFuncao} n√£o implementada. Verifique se o arquivo lotes.js est√° carregado.`);
                };
            }
        });
    }
    
    // =======================================================
    // FUN√á√ÉO AUXILIAR PARA ATUALIZAR LISTA
    // =======================================================
    
    function atualizarListaLotes() {
        // Tentar recarregar a lista de lotes se a fun√ß√£o existir
        if (typeof window.carregarLotesDoCookie === 'function') {
            window.carregarLotesDoCookie();
        } else if (typeof window.renderizarLotesPorData === 'function') {
            window.renderizarLotesPorData();
        } else {
            console.log('üîÑ Fun√ß√µes de atualiza√ß√£o de lista n√£o encontradas');
            
            // For√ßar refresh da p√°gina como √∫ltimo recurso
            setTimeout(() => {
                if (confirm('Lote salvo! Deseja recarregar a p√°gina para ver as altera√ß√µes?')) {
                    window.location.reload();
                }
            }, 500);
        }
    }
    
    console.log('‚úÖ Fix para salvarLoteData configurado');
});
