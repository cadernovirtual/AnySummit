/**
 * PATCH SUPER AGRESSIVO: Garante que lote_id seja coletado nos modais
 * For√ßa inser√ß√£o de lote_id nos elementos .ticket-item
 */

document.addEventListener('DOMContentLoaded', function() {
    console.log('üö® PATCH SUPER AGRESSIVO para modais carregado');
    
    // Aguardar um pouco para outras fun√ß√µes carregarem
    setTimeout(() => {
        aplicarPatchSuperAgressivo();
    }, 1000);
    
    function aplicarPatchSuperAgressivo() {
        console.log('‚ö° Aplicando patch super agressivo...');
        
        // INTERCEPTAR CRIA√á√ÉO DE INGRESSOS PAGOS
        if (window.createPaidTicket) {
            const originalCreatePaidTicket = window.createPaidTicket;
            window.createPaidTicket = function() {
                console.log('üí∞ INTERCEPTANDO createPaidTicket');
                
                // Coletar lote_id ANTES de criar
                const loteSelect = document.getElementById('paidTicketLote');
                const loteId = loteSelect ? parseInt(loteSelect.value) : null;
                
                console.log('üéØ lote_id coletado do modal pago:', loteId);
                
                // Chamar fun√ß√£o original
                const result = originalCreatePaidTicket.apply(this, arguments);
                
                // FOR√áAR lote_id no elemento criado
                setTimeout(() => {
                    forcarLoteIdNoUltimoIngresso(loteId, 'pago');
                }, 200);
                
                return result;
            };
            console.log('‚úÖ createPaidTicket interceptada');
        } else {
            console.warn('‚ö†Ô∏è createPaidTicket n√£o encontrada');
        }
        
        // INTERCEPTAR CRIA√á√ÉO DE INGRESSOS GRATUITOS
        if (window.createFreeTicket) {
            const originalCreateFreeTicket = window.createFreeTicket;
            window.createFreeTicket = function() {
                console.log('üÜì INTERCEPTANDO createFreeTicket');
                
                // Coletar lote_id ANTES de criar
                const loteSelect = document.getElementById('freeTicketLote');
                const loteId = loteSelect ? parseInt(loteSelect.value) : null;
                
                console.log('üéØ lote_id coletado do modal gratuito:', loteId);
                
                // Chamar fun√ß√£o original
                const result = originalCreateFreeTicket.apply(this, arguments);
                
                // FOR√áAR lote_id no elemento criado
                setTimeout(() => {
                    forcarLoteIdNoUltimoIngresso(loteId, 'gratuito');
                }, 200);
                
                return result;
            };
            console.log('‚úÖ createFreeTicket interceptada');
        } else {
            console.warn('‚ö†Ô∏è createFreeTicket n√£o encontrada');
        }
        
        // INTERCEPTAR UPDATE DE INGRESSOS PAGOS
        if (window.updatePaidTicket) {
            const originalUpdatePaidTicket = window.updatePaidTicket;
            window.updatePaidTicket = function() {
                console.log('üìù INTERCEPTANDO updatePaidTicket');
                
                // Coletar lote_id e ticket_id ANTES do update
                const loteSelect = document.getElementById('editPaidTicketLote');
                const ticketIdInput = document.getElementById('editPaidTicketId');
                const loteId = loteSelect ? parseInt(loteSelect.value) : null;
                const ticketId = ticketIdInput ? ticketIdInput.value : null;
                
                console.log('üéØ UPDATE - lote_id:', loteId, 'ticket_id:', ticketId);
                
                // Chamar fun√ß√£o original
                const result = originalUpdatePaidTicket.apply(this, arguments);
                
                // FOR√áAR lote_id no elemento espec√≠fico
                setTimeout(() => {
                    forcarLoteIdNoIngressoEspecifico(ticketId, loteId);
                }, 200);
                
                return result;
            };
            console.log('‚úÖ updatePaidTicket interceptada');
        }
        
        // INTERCEPTAR UPDATE DE INGRESSOS GRATUITOS
        if (window.updateFreeTicket) {
            const originalUpdateFreeTicket = window.updateFreeTicket;
            window.updateFreeTicket = function() {
                console.log('üìù INTERCEPTANDO updateFreeTicket');
                
                // Coletar lote_id e ticket_id ANTES do update
                const loteSelect = document.getElementById('editFreeTicketLote');
                const ticketIdInput = document.getElementById('editFreeTicketId');
                const loteId = loteSelect ? parseInt(loteSelect.value) : null;
                const ticketId = ticketIdInput ? ticketIdInput.value : null;
                
                console.log('üéØ UPDATE GRATUITO - lote_id:', loteId, 'ticket_id:', ticketId);
                
                // Chamar fun√ß√£o original
                const result = originalUpdateFreeTicket.apply(this, arguments);
                
                // FOR√áAR lote_id no elemento espec√≠fico
                setTimeout(() => {
                    forcarLoteIdNoIngressoEspecifico(ticketId, loteId);
                }, 200);
                
                return result;
            };
            console.log('‚úÖ updateFreeTicket interceptada');
        }
    }
    
    // Fun√ß√£o para for√ßar lote_id no √∫ltimo ingresso criado
    function forcarLoteIdNoUltimoIngresso(loteId, tipo) {
        console.log(`üî• For√ßando lote_id ${loteId} no √∫ltimo ingresso ${tipo}`);
        
        const ticketItems = document.querySelectorAll('.ticket-item');
        const ultimoIngresso = ticketItems[ticketItems.length - 1];
        
        if (ultimoIngresso) {
            // Garantir que ticketData existe
            if (!ultimoIngresso.ticketData) {
                ultimoIngresso.ticketData = {};
            }
            
            // FOR√áAR todos os formatos poss√≠veis
            ultimoIngresso.ticketData.loteId = loteId;
            ultimoIngresso.ticketData.lote_id = loteId;
            ultimoIngresso.dataset.loteId = loteId;
            ultimoIngresso.dataset.lote_id = loteId;
            
            // Garantir tipo tamb√©m
            ultimoIngresso.ticketData.tipo = tipo;
            ultimoIngresso.ticketData.type = tipo === 'pago' ? 'paid' : 'free';
            
            console.log('‚úÖ lote_id FOR√áADO no √∫ltimo elemento:', {
                loteId: ultimoIngresso.ticketData.loteId,
                lote_id: ultimoIngresso.ticketData.lote_id,
                tipo: ultimoIngresso.ticketData.tipo
            });
        } else {
            console.error('‚ùå √öltimo ingresso n√£o encontrado');
        }
    }
    
    // Fun√ß√£o para for√ßar lote_id em ingresso espec√≠fico (para updates)
    function forcarLoteIdNoIngressoEspecifico(ticketId, loteId) {
        console.log(`üî• For√ßando lote_id ${loteId} no ingresso ${ticketId}`);
        
        const elemento = document.querySelector(`[data-ticket-id="${ticketId}"]`);
        
        if (elemento) {
            // Garantir que ticketData existe
            if (!elemento.ticketData) {
                elemento.ticketData = {};
            }
            
            // FOR√áAR todos os formatos poss√≠veis
            elemento.ticketData.loteId = loteId;
            elemento.ticketData.lote_id = loteId;
            elemento.dataset.loteId = loteId;
            elemento.dataset.lote_id = loteId;
            
            console.log('‚úÖ lote_id FOR√áADO no elemento espec√≠fico:', {
                ticketId: ticketId,
                loteId: elemento.ticketData.loteId,
                lote_id: elemento.ticketData.lote_id
            });
        } else {
            console.error('‚ùå Elemento com ticket_id', ticketId, 'n√£o encontrado');
        }
    }
    
    // Fun√ß√£o para verificar todos os ingressos
    window.verificarLoteIdTodosIngressos = function() {
        console.log('üîç Verificando lote_id em todos os ingressos...');
        
        const ticketItems = document.querySelectorAll('.ticket-item');
        
        ticketItems.forEach((item, index) => {
            console.log(`\nüé´ Ingresso ${index + 1}:`);
            console.log('  - ticketData.loteId:', item.ticketData?.loteId);
            console.log('  - ticketData.lote_id:', item.ticketData?.lote_id);
            console.log('  - dataset.loteId:', item.dataset?.loteId);
            console.log('  - dataset.lote_id:', item.dataset?.lote_id);
            
            if (!item.ticketData?.loteId && !item.ticketData?.lote_id) {
                console.warn('‚ö†Ô∏è INGRESSO SEM LOTE_ID!');
            }
        });
    };
    
    console.log('üö® PATCH SUPER AGRESSIVO carregado');
    console.log('üí° Use verificarLoteIdTodosIngressos() para verificar');
});
