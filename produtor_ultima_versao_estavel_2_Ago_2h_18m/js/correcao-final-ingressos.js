/**
 * CORRE√á√ÉO FINAL: Update de ingressos e fun√ß√µes de edi√ß√£o/exclus√£o
 * Resolve problemas de lote_id no update e bot√µes sem fun√ß√µes
 */

document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Corre√ß√£o final de ingressos - Update e bot√µes');
    
    // 1. CORRIGIR UPDATE de ingressos - interceptar e corrigir dados
    const originalUpdatePaidTicket = window.updatePaidTicket;
    if (originalUpdatePaidTicket) {
        window.updatePaidTicket = function() {
            console.log('üìù Interceptando updatePaidTicket para corrigir lote_id');
            
            // Coletar lote_id do modal de edi√ß√£o
            const loteSelect = document.getElementById('editPaidTicketLote');
            const loteId = loteSelect ? parseInt(loteSelect.value) : null;
            
            console.log('üéØ lote_id coletado do modal de edi√ß√£o:', loteId);
            
            // Chamar fun√ß√£o original
            const result = originalUpdatePaidTicket.apply(this, arguments);
            
            // Ap√≥s update, FOR√áAR o lote_id no elemento
            setTimeout(() => {
                const ticketId = document.getElementById('editPaidTicketId')?.value;
                if (ticketId) {
                    const ticketElement = document.querySelector(`[data-ticket-id="${ticketId}"]`);
                    if (ticketElement && ticketElement.ticketData) {
                        ticketElement.ticketData.loteId = loteId;
                        ticketElement.ticketData.lote_id = loteId;
                        console.log('‚úÖ lote_id FOR√áADO no elemento ap√≥s update:', loteId);
                    }
                }
            }, 100);
            
            return result;
        };
    }
    
    const originalUpdateFreeTicket = window.updateFreeTicket;
    if (originalUpdateFreeTicket) {
        window.updateFreeTicket = function() {
            console.log('üìù Interceptando updateFreeTicket para corrigir lote_id');
            
            // Coletar lote_id do modal de edi√ß√£o
            const loteSelect = document.getElementById('editFreeTicketLote');
            const loteId = loteSelect ? parseInt(loteSelect.value) : null;
            
            console.log('üéØ lote_id coletado do modal de edi√ß√£o gratuito:', loteId);
            
            // Chamar fun√ß√£o original
            const result = originalUpdateFreeTicket.apply(this, arguments);
            
            // Ap√≥s update, FOR√áAR o lote_id no elemento
            setTimeout(() => {
                const ticketId = document.getElementById('editFreeTicketId')?.value;
                if (ticketId) {
                    const ticketElement = document.querySelector(`[data-ticket-id="${ticketId}"]`);
                    if (ticketElement && ticketElement.ticketData) {
                        ticketElement.ticketData.loteId = loteId;
                        ticketElement.ticketData.lote_id = loteId;
                        console.log('‚úÖ lote_id FOR√áADO no elemento gratuito ap√≥s update:', loteId);
                    }
                }
            }, 100);
            
            return result;
        };
    }
    
    // 2. CRIAR FUN√á√ïES DE EDI√á√ÉO E EXCLUS√ÉO (que estavam faltando)
    
    // Fun√ß√£o para editar ingresso
    window.editarIngresso = function(button) {
        console.log('‚úèÔ∏è Editando ingresso...');
        
        const ticketItem = button.closest('.ticket-item');
        if (!ticketItem || !ticketItem.ticketData) {
            console.error('‚ùå Dados do ingresso n√£o encontrados');
            return;
        }
        
        const ticketData = ticketItem.ticketData;
        console.log('üìä Dados do ingresso para edi√ß√£o:', ticketData);
        
        // Determinar tipo do ingresso e abrir modal apropriado
        const tipo = ticketData.tipo || ticketData.type;
        
        if (tipo === 'pago' || tipo === 'paid') {
            abrirModalEdicaoPago(ticketData);
        } else if (tipo === 'gratuito' || tipo === 'free') {
            abrirModalEdicaoGratuito(ticketData);
        } else if (tipo === 'combo') {
            // Para combos, usar modal espec√≠fico se existir
            console.log('üé≠ Editando combo - implementar se necess√°rio');
            abrirModalEdicaoPago(ticketData); // Fallback
        }
    };
    
    // Fun√ß√£o para excluir ingresso
    window.excluirIngresso = function(button) {
        console.log('üóëÔ∏è Excluindo ingresso...');
        
        const ticketItem = button.closest('.ticket-item');
        if (!ticketItem) {
            console.error('‚ùå Item do ingresso n√£o encontrado');
            return;
        }
        
        const ticketData = ticketItem.ticketData;
        const titulo = ticketData?.titulo || ticketData?.title || 'ingresso';
        
        if (confirm(`Tem certeza que deseja excluir o ingresso "${titulo}"?`)) {
            // Remover da interface
            ticketItem.remove();
            
            // Atualizar contador se existir
            atualizarContadorIngressos();
            
            console.log('‚úÖ Ingresso exclu√≠do da interface');
        }
    };
    
    // Fun√ß√£o para abrir modal de edi√ß√£o - pago
    function abrirModalEdicaoPago(ticketData) {
        console.log('üí∞ Abrindo modal de edi√ß√£o para ingresso pago');
        
        // Preencher campos do modal
        document.getElementById('editPaidTicketId').value = ticketData.id || '';
        document.getElementById('editPaidTicketTitle').value = ticketData.titulo || ticketData.title || '';
        document.getElementById('editPaidTicketDescription').value = ticketData.descricao || ticketData.description || '';
        document.getElementById('editPaidTicketQuantity').value = ticketData.quantity || ticketData.quantidade_total || 100;
        document.getElementById('editPaidTicketPrice').value = ticketData.preco || ticketData.price || 0;
        document.getElementById('editPaidSaleStart').value = ticketData.inicio_venda || ticketData.startDate || '';
        document.getElementById('editPaidSaleEnd').value = ticketData.fim_venda || ticketData.endDate || '';
        document.getElementById('editPaidMinLimit').value = ticketData.limite_min || ticketData.minQuantity || 1;
        document.getElementById('editPaidMaxLimit').value = ticketData.limite_max || ticketData.maxQuantity || 5;
        
        // Selecionar lote correto
        const loteSelect = document.getElementById('editPaidTicketLote');
        if (loteSelect && ticketData.loteId) {
            loteSelect.value = ticketData.loteId;
        }
        
        // Abrir modal
        openModal('editPaidTicketModal');
    }
    
    // Fun√ß√£o para abrir modal de edi√ß√£o - gratuito
    function abrirModalEdicaoGratuito(ticketData) {
        console.log('üÜì Abrindo modal de edi√ß√£o para ingresso gratuito');
        
        // Preencher campos do modal
        document.getElementById('editFreeTicketId').value = ticketData.id || '';
        document.getElementById('editFreeTicketTitle').value = ticketData.titulo || ticketData.title || '';
        document.getElementById('editFreeTicketDescription').value = ticketData.descricao || ticketData.description || '';
        document.getElementById('editFreeTicketQuantity').value = ticketData.quantity || ticketData.quantidade_total || 100;
        document.getElementById('editFreeSaleStart').value = ticketData.inicio_venda || ticketData.startDate || '';
        document.getElementById('editFreeSaleEnd').value = ticketData.fim_venda || ticketData.endDate || '';
        document.getElementById('editFreeMinLimit').value = ticketData.limite_min || ticketData.minQuantity || 1;
        document.getElementById('editFreeMaxLimit').value = ticketData.limite_max || ticketData.maxQuantity || 5;
        
        // Selecionar lote correto
        const loteSelect = document.getElementById('editFreeTicketLote');
        if (loteSelect && ticketData.loteId) {
            loteSelect.value = ticketData.loteId;
        }
        
        // Abrir modal
        openModal('editFreeTicketModal');
    }
    
    // Fun√ß√£o para atualizar contador de ingressos
    function atualizarContadorIngressos() {
        const ticketItems = document.querySelectorAll('.ticket-item');
        const contador = document.getElementById('totalIngressos');
        
        if (contador) {
            contador.textContent = ticketItems.length;
        }
        
        console.log(`üìä Contador atualizado: ${ticketItems.length} ingressos`);
    }
    
    // 3. CORRIGIR RESTAURA√á√ÉO DE INGRESSOS - Garantir bot√µes com √≠cones
    const originalRestaurarIngressos = window.restaurarIngressos;
    if (originalRestaurarIngressos) {
        window.restaurarIngressos = function(ingressos) {
            console.log('üîÑ Interceptando restaura√ß√£o de ingressos para corrigir bot√µes');
            
            // Chamar fun√ß√£o original
            const result = originalRestaurarIngressos.apply(this, arguments);
            
            // Ap√≥s restaura√ß√£o, corrigir bot√µes
            setTimeout(() => {
                corrigirBotoesIngressos();
            }, 500);
            
            return result;
        };
    }
    
    // Fun√ß√£o para corrigir bot√µes dos ingressos
    function corrigirBotoesIngressos() {
        console.log('üîß Corrigindo bot√µes dos ingressos restaurados...');
        
        const ticketItems = document.querySelectorAll('.ticket-item');
        
        ticketItems.forEach((item, index) => {
// ARQUIVO DESATIVADO - ESTAVA CAUSANDO DUPLICA√á√ÉO DE BOT√ïES
// Os bot√µes j√° s√£o criados corretamente pelo padronizacao-definitiva.js

console.log('‚ö†Ô∏è correcao-final-ingressos.js DESATIVADO para evitar duplica√ß√£o');

// Manter apenas as fun√ß√µes essenciais sem criar bot√µes duplicados
                    editButton.title = 'Editar ingresso';
                    editButton.onclick = function() { editarIngresso(this); };
                    actionsContainer.appendChild(editButton);
                }
                
                if (!deleteButton) {
                    deleteButton = document.createElement('button');
                    deleteButton.type = 'button';
                    deleteButton.className = 'btn-delete-ticket';
                    deleteButton.innerHTML = 'üóëÔ∏è'; // √çcone de exclus√£o
                    deleteButton.title = 'Excluir ingresso';
                    deleteButton.onclick = function() { excluirIngresso(this); };
                    actionsContainer.appendChild(deleteButton);
                }
            } else {
                // Corrigir √≠cones se bot√µes existem mas sem √≠cone
                if (editButton && !editButton.innerHTML.includes('‚úèÔ∏è')) {
                    editButton.innerHTML = '‚úèÔ∏è';
                    editButton.onclick = function() { editarIngresso(this); };
                }
                
                if (deleteButton && !deleteButton.innerHTML.includes('üóëÔ∏è')) {
                    deleteButton.innerHTML = 'üóëÔ∏è';
                    deleteButton.onclick = function() { excluirIngresso(this); };
                }
            }
        });
        
        console.log('‚úÖ Bot√µes corrigidos para todos os ingressos');
    }
    
    // Fun√ß√£o para criar container de a√ß√µes se n√£o existir
    function criarContainerAcoes(ticketItem) {
        let container = ticketItem.querySelector('.ticket-actions');
        if (!container) {
            container = document.createElement('div');
            container.className = 'ticket-actions';
            container.style.cssText = 'display: flex; gap: 5px; margin-top: 10px;';
            ticketItem.appendChild(container);
        }
        return container;
    }
    
    // Fun√ß√£o de teste manual
    window.testarCorrecaoIngressos = function() {
        console.log('üß™ Testando corre√ß√£o de ingressos...');
        
        const ticketItems = document.querySelectorAll('.ticket-item');
        console.log(`üìä ${ticketItems.length} ingressos encontrados`);
        
        ticketItems.forEach((item, index) => {
            console.log(`\nüé´ Ingresso ${index + 1}:`);
            console.log('  - ticketData.loteId:', item.ticketData?.loteId);
            console.log('  - ticketData.lote_id:', item.ticketData?.lote_id);
            
            const editBtn = item.querySelector('button[onclick*="editarIngresso"]');
            const deleteBtn = item.querySelector('button[onclick*="excluirIngresso"]');
            
            console.log('  - Bot√£o editar:', !!editBtn);
            console.log('  - Bot√£o excluir:', !!deleteBtn);
        });
        
        console.log('\nüì¶ Testando coleta de dados:');
        if (window.coletarDadosIngressos) {
            const dados = window.coletarDadosIngressos();
            dados.forEach((ingresso, index) => {
                console.log(`  Ingresso ${index + 1} - lote_id: ${ingresso.lote_id}`);
            });
        }
    };
    
    console.log('‚úÖ Corre√ß√£o final de ingressos carregada');
    console.log('  - Update corrigido para enviar lote_id');
    console.log('  - Fun√ß√µes editarIngresso() e excluirIngresso() criadas');
    console.log('  - Bot√µes com √≠cones garantidos na restaura√ß√£o');
    console.log('üí° Use testarCorrecaoIngressos() para verificar');
});
