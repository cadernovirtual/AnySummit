// CORRE√á√ÉO FINAL DEFINITIVA - Executar DEPOIS de combo-functions.js
(function() {
    console.log('üö® CORRE√á√ÉO DEFINITIVA FINAL INICIANDO...');
    
    // Fun√ß√£o para aplicar corre√ß√µes
    function aplicarCorrecaoDefinitiva() {
        console.log('üî• SOBRESCREVENDO addComboToList AGORA!');
        
        // Salvar refer√™ncia da fun√ß√£o original caso precise
        const funcaoOriginal = window.addComboToList;
        
        // SOBRESCREVER COM FOR√áA TOTAL
        window.addComboToList = function(title, quantity, price, comboData, totalItems, description, loteId, loteNome, startDate, endDate) {
            console.log('‚úÖ FUN√á√ÉO CORRIGIDA EXECUTANDO! T√≠tulo:', title);
            
            if (!window.ticketCount) window.ticketCount = 0;
            window.ticketCount++;
            
            const ticketList = document.getElementById('ticketList');
            if (!ticketList) {
                console.error('Lista de tickets n√£o encontrada!');
                return;
            }

            // Processar valores
            const cleanPrice = parseFloat(price.replace(/[R$\s\.]/g, '').replace(',', '.'));
            const taxaServico = comboData && comboData.taxaServico !== false;
            const tax = taxaServico ? (cleanPrice * 0.1) : 0;
            const totalPrice = cleanPrice + tax;
            
            // Formata√ß√£o brasileira
            const formatMoney = (val) => `R$ ${val.toFixed(2).replace('.', ',')}`;
            const formatDate = (dateStr) => {
                if (!dateStr) return '';
                const date = new Date(dateStr);
                return date.toLocaleDateString('pt-BR') + ' ' + 
                       date.toLocaleTimeString('pt-BR', {hour: '2-digit', minute: '2-digit'});
            };
            
            // Criar elemento
            const ticketItem = document.createElement('div');
            ticketItem.className = 'ticket-item';
            ticketItem.dataset.ticketId = window.ticketCount;
            ticketItem.dataset.loteId = loteId || '';
            ticketItem.dataset.comboData = JSON.stringify(comboData || {});
            
            // IMPORTANTE: N√£o duplicar "Inclui:"
            let descricaoLimpa = '';
            if (description) {
                // Remover "Inclui:" do in√≠cio se existir
                descricaoLimpa = description.replace(/^Inclui:\s*/i, '').trim();
                // Se a descri√ß√£o for apenas os itens, ignorar
                const itensTexto = comboData.itens ? 
                    comboData.itens.map(item => `${item.quantidade}x ${item.nome}`).join(', ') : '';
                if (descricaoLimpa === itensTexto) {
                    descricaoLimpa = '';
                }
            }
            
            // HTML CORRETO - FORMATO ID√äNTICO AOS INGRESSOS PAGOS
            ticketItem.innerHTML = `
                <div class="ticket-header">
                    <div class="ticket-title">
                        <span class="ticket-name" style="color: #00C2FF; font-weight: 600;">${title}</span>
                        <span class="ticket-type-badge pago" style="background-color: #9C27B0 !important; color: white !important;">
                            (Combo)
                        </span>
                        <span class="ticket-lote-info" style="font-size: 11px; color: #666; margin-left: 10px;">
                            ${loteNome || 'lote 1'} - Por Data (${formatDate(startDate)} at√© ${formatDate(endDate)})
                        </span>
                    </div>
                    <div class="ticket-actions">
                        <button class="btn-icon" onclick="editTicket(${window.ticketCount})" title="Editar">‚úèÔ∏è</button>
                        <button class="btn-icon" onclick="removeTicket(${window.ticketCount})" title="Remover">üóëÔ∏è</button>
                    </div>
                </div>
                <div class="ticket-details">
                    <div class="ticket-info">
                        <span>Quantidade: <strong>${quantity}</strong></span>
                        <span>Pre√ßo: <strong class="ticket-buyer-price">${formatMoney(totalPrice)}</strong></span>
                        <span>Taxa: <strong>${formatMoney(tax)}</strong></span>
                        <span>Voc√™ recebe: <strong>${formatMoney(cleanPrice)}</strong></span>
                    </div>
                    
                    ${descricaoLimpa ? `
                    <div style="margin-top: 10px; padding: 8px 12px; background: #f8f9fa; border-radius: 6px; font-size: 13px; color: #666;">
                        ${descricaoLimpa}
                    </div>
                    ` : ''}
                    
                    ${comboData && comboData.itens && comboData.itens.length > 0 ? `
                    <div style="margin-top: 10px; padding: 8px 12px; background: #f0f4ff; border-radius: 6px; font-size: 13px; border-left: 3px solid #9C27B0;">
                        <strong style="color: #9C27B0;">Inclui:</strong>
                        <span style="color: #555; margin-left: 5px;">
                            ${comboData.itens.map(item => `${item.quantidade}x ${item.nome}`).join(', ')}
                        </span>
                    </div>
                    ` : ''}
                </div>
            `;
            
            ticketList.appendChild(ticketItem);
            
            // Salvar dados
            ticketItem.ticketData = {
                type: 'combo',
                title: title,
                quantity: quantity,
                price: cleanPrice,
                description: descricaoLimpa,
                comboData: comboData,
                saleStart: startDate,
                saleEnd: endDate,
                loteId: loteId,
                loteName: loteNome
            };
            
            console.log('‚úÖ COMBO ADICIONADO COM SUCESSO NO FORMATO CORRETO!');
        };
        
        // Tamb√©m corrigir combos existentes
        setTimeout(() => {
            const combosExistentes = document.querySelectorAll('.ticket-item[data-combo-data]');
            combosExistentes.forEach(combo => {
                // Verificar se tem emoji
                if (combo.innerHTML.includes('üì¶')) {
                    console.log('üîß Removendo emoji do combo');
                    combo.innerHTML = combo.innerHTML.replace(/üì¶/g, '');
                }
                
                // Verificar duplica√ß√£o de "Inclui:"
                const descricoes = combo.querySelectorAll('.ticket-description, .combo-items');
                if (descricoes.length > 1) {
                    console.log('üîß Removendo "Inclui:" duplicado');
                    // Manter apenas a √∫ltima
                    for (let i = 0; i < descricoes.length - 1; i++) {
                        if (descricoes[i].textContent.includes('Inclui:')) {
                            descricoes[i].remove();
                        }
                    }
                }
            });
        }, 500);
    }
    
    // Aplicar corre√ß√£o ap√≥s 3 segundos (depois de combo-functions.js)
    setTimeout(aplicarCorrecaoDefinitiva, 3000);
    
    // Aplicar tamb√©m quando criar novo combo
    const originalCreateCombo = window.createComboTicket;
    window.createComboTicket = function() {
        console.log('üéØ Interceptando createComboTicket...');
        if (originalCreateCombo) {
            originalCreateCombo.call(this);
        }
        // Reaplicar corre√ß√£o ap√≥s criar
        setTimeout(aplicarCorrecaoDefinitiva, 100);
    };
    
})();