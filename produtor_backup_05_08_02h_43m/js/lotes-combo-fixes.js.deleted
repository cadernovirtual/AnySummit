// Corre√ß√µes para problemas de lotes e combos
(function() {
    'use strict';
    
    // ==================== CORRE√á√ÉO 1: BOT√ïES DE LOTES ====================
    // Corrigir problema dos bot√µes de lotes ap√≥s valida√ß√£o
    const originalValidateStep = window.validateStep;
    window.validateStep = function(stepNumber) {
        const result = originalValidateStep ? originalValidateStep.call(this, stepNumber) : true;
        
        // Se for o step 5 e a valida√ß√£o falhou, garantir que os bot√µes continuem funcionando
        if (stepNumber === 5 && !result) {
            // Re-ativar bot√µes ap√≥s um pequeno delay
            setTimeout(() => {
                const addLoteBtn = document.querySelector('[onclick*="adicionarLote"]');
                const addMultipleLotesBtn = document.querySelector('[onclick*="abrirModalMultiplosLotes"]');
                
                if (addLoteBtn) {
                    addLoteBtn.disabled = false;
                    addLoteBtn.style.opacity = '1';
                    addLoteBtn.style.cursor = 'pointer';
                }
                
                if (addMultipleLotesBtn) {
                    addMultipleLotesBtn.disabled = false;
                    addMultipleLotesBtn.style.opacity = '1';
                    addMultipleLotesBtn.style.cursor = 'pointer';
                }
            }, 100);
        }
        
        return result;
    };
    
    // ==================== CORRE√á√ÉO 2: COMBO DUPLICADO "INCLUI:" ====================
    // Corrigir a cria√ß√£o do combo para n√£o duplicar "Inclui:"
    const originalCreateComboTicket = window.createComboTicket;
    window.createComboTicket = function() {
        // Interceptar a cria√ß√£o para corrigir a descri√ß√£o
        const descriptionField = document.getElementById('comboTicketDescription');
        const originalDescription = descriptionField ? descriptionField.value : '';
        
        // Se houver descri√ß√£o, garantir que n√£o come√ßa com "Inclui:"
        if (descriptionField && originalDescription && !originalDescription.startsWith('Inclui:')) {
            // Temporariamente adicionar um marcador para identificar descri√ß√£o customizada
            descriptionField.dataset.customDescription = 'true';
        }
        
        // Chamar fun√ß√£o original
        if (originalCreateComboTicket) {
            originalCreateComboTicket.call(this);
        }
    };
    
    // ==================== CORRE√á√ÉO 3: FORMATA√á√ÉO DO COMBO ====================
    // Sobrescrever completamente a fun√ß√£o addComboToList com formata√ß√£o correta
    window.addComboToList = function(title, quantity, price, comboData, totalItems, description, loteId, loteNome, startDate, endDate) {
        if (!window.ticketCount) window.ticketCount = 0;
        window.ticketCount++;
        
        const ticketList = document.getElementById('ticketList');
        if (!ticketList) return;

        const cleanPrice = parseFloat(price.replace(/[R$\s\.]/g, '').replace(',', '.'));
        const taxaServico = comboData.taxaServico !== false;
        const tax = taxaServico ? (cleanPrice * 0.1) : 0;
        const totalPrice = cleanPrice + tax;
        const receiveAmount = cleanPrice;
        
        // Formata√ß√£o de valores
        const priceFormatted = `R$ ${cleanPrice.toFixed(2).replace('.', ',')}`;
        const taxFormatted = `R$ ${tax.toFixed(2).replace('.', ',')}`;
        const totalFormatted = `R$ ${totalPrice.toFixed(2).replace('.', ',')}`;
        const receiveFormatted = `R$ ${receiveAmount.toFixed(2).replace('.', ',')}`;
        
        // Formatar datas
        const formatDate = (dateStr) => {
            if (!dateStr) return 'N/A';
            const date = new Date(dateStr);
            return date.toLocaleDateString('pt-BR') + ' ' + date.toLocaleTimeString('pt-BR', {hour: '2-digit', minute: '2-digit'});
        };
        
        // Extrair tipo de lote e datas do loteNome
        let tipoLote = 'Por Data';
        let loteInfo = loteNome || '';
        if (loteNome && loteNome.includes(' - ')) {
            const parts = loteNome.split(' - ');
            loteInfo = parts[0];
            if (parts[1]) {
                tipoLote = parts[1].split(' (')[0];
            }
        }
        
        const ticketItem = document.createElement('div');
        ticketItem.className = 'ticket-item';
        ticketItem.dataset.ticketId = window.ticketCount;
        ticketItem.dataset.loteId = loteId;
        ticketItem.dataset.comboData = JSON.stringify(comboData);
        
        // Verificar se a descri√ß√£o √© customizada ou gerada automaticamente
        let hasCustomDescription = false;
        let cleanDescription = '';
        
        if (description) {
            // Se a descri√ß√£o n√£o cont√©m os itens do combo, √© customizada
            const itemsText = comboData.itens.map(item => `${item.quantidade}x ${item.nome}`).join(', ');
            if (!description.includes(itemsText)) {
                hasCustomDescription = true;
                cleanDescription = description;
            }
        }
        
        ticketItem.innerHTML = `
            <div class="ticket-header">
                <div class="ticket-title">
                    <span class="ticket-name">${title}</span>
                    <span class="ticket-type-badge combo" style="background: #9C27B0; color: white;">
                        (Combo)
                    </span>
                    <span class="ticket-lote-info" style="font-size: 11px; color: #666; margin-left: 10px;">
                        ${loteInfo} - ${tipoLote} (${formatDate(startDate)} at√© ${formatDate(endDate)})
                    </span>
                </div>
                <div class="ticket-actions">
                    <button class="btn-icon" onclick="editTicket(${window.ticketCount})" title="Editar">‚úèÔ∏è</button>
                    <button class="btn-icon" onclick="removeTicket(${window.ticketCount})" title="Remover">üóëÔ∏è</button>
                </div>
            </div>
            <div class="ticket-details">
                <div class="ticket-info">
                    <span>Quantidade: <strong>${quantity}</strong></span>
                    <span>Pre√ßo: <strong class="ticket-buyer-price">${totalFormatted}</strong></span>
                    <span>Taxa: <strong>${taxFormatted}</strong></span>
                    <span>Voc√™ recebe: <strong>${receiveFormatted}</strong></span>
                </div>
                
                ${hasCustomDescription ? `
                <div class="ticket-description" style="margin-top: 10px; padding: 8px 12px; background: #f8f9fa; border-radius: 6px; font-size: 13px; color: #666;">
                    ${cleanDescription}
                </div>
                ` : ''}
                
                <div class="combo-items" style="margin-top: 10px; padding: 10px 12px; background: #f0f4ff; border-radius: 6px; border-left: 3px solid #9C27B0;">
                    <strong style="color: #9C27B0; font-size: 13px;">Inclui:</strong>
                    <span style="color: #555; font-size: 13px; margin-left: 5px;">
                        ${comboData.itens.map(item => `${item.quantidade}x ${item.nome}`).join(', ')}
                    </span>
                </div>
            </div>
        `;
        
        ticketList.appendChild(ticketItem);
        
        // Armazenar dados do combo para edi√ß√£o
        ticketItem.ticketData = {
            type: 'combo',
            title: title,
            quantity: quantity,
            price: cleanPrice,
            description: hasCustomDescription ? cleanDescription : '',
            comboData: comboData,
            saleStart: startDate,
            saleEnd: endDate,
            loteId: loteId,
            loteName: loteNome,
            taxaServico: taxaServico
        };
        
        console.log('‚úÖ Combo adicionado com formata√ß√£o correta');
    };
    
    // ==================== CORRE√á√ÉO 4: GARANTIR FUNCIONAMENTO DOS BOT√ïES ====================
    // Adicionar listener para garantir que os bot√µes de lote sempre funcionem
    document.addEventListener('DOMContentLoaded', function() {
        // Observer para detectar quando a mensagem de valida√ß√£o aparece
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
                    const validationMsg = document.getElementById('validation-step-5');
                    if (validationMsg && validationMsg.style.display !== 'none') {
                        // Reativar bot√µes quando a mensagem aparecer
                        setTimeout(() => {
                            const buttons = document.querySelectorAll('.ticket-type-option button');
                            buttons.forEach(btn => {
                                btn.disabled = false;
                                btn.style.opacity = '1';
                                btn.style.cursor = 'pointer';
                            });
                        }, 100);
                    }
                }
            });
        });
        
        const validationMsg = document.getElementById('validation-step-5');
        if (validationMsg) {
            observer.observe(validationMsg, { attributes: true });
        }
    });
    
    console.log('‚úÖ Corre√ß√µes de lotes e combos carregadas');
})();