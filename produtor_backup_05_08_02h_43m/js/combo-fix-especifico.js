/**
 * FIX ESPEC√çFICO PARA PROBLEMAS DOS COMBOS
 * Corrige: fun√ß√£o removerItemCombo + carregamento de selects + limpeza geral
 */

console.log('üîß COMBO-FIX-ESPECIFICO.JS carregando...');

/**
 * FUN√á√ÉO removerItemCombo DEFINITIVA
 */
window.removerItemCombo = function(index) {
    console.log(`üóëÔ∏è removerItemCombo chamada com index: ${index}`);
    
    // Garantir que window.comboItems existe
    if (!window.comboItems) {
        console.log('üì¶ Inicializando window.comboItems vazio');
        window.comboItems = [];
    }
    
    console.log('üì¶ comboItems antes da remo√ß√£o:', window.comboItems);
    
    // Remover item pelo index
    if (index >= 0 && index < window.comboItems.length) {
        const itemRemovido = window.comboItems.splice(index, 1);
        console.log(`‚úÖ Item removido:`, itemRemovido[0]);
        console.log('üì¶ comboItems ap√≥s remo√ß√£o:', window.comboItems);
        
        // Atualizar interface
        atualizarInterfaceCombo();
        
    } else {
        console.warn(`‚ö†Ô∏è Index ${index} inv√°lido para array de tamanho ${window.comboItems.length}`);
    }
};

/**
 * FUN√á√ÉO removerItemEditCombo DEFINITIVA (para modal de edi√ß√£o)
 */
window.removerItemEditCombo = function(index) {
    console.log(`üóëÔ∏è removerItemEditCombo chamada com index: ${index}`);
    
    // Para modal de edi√ß√£o, usar mesma l√≥gica
    window.removerItemCombo(index);
};

/**
 * Atualizar interface do combo ap√≥s mudan√ßas
 */
function atualizarInterfaceCombo() {
    console.log('üîÑ Atualizando interface do combo...');
    
    // Atualizar lista visual nos dois containers
    const containers = [
        document.getElementById('comboItemsList'),
        document.getElementById('editComboItemsList')
    ];
    
    containers.forEach(container => {
        if (container) {
            renderizarListaItensCombo(container);
        }
    });
}

/**
 * Renderizar lista de itens do combo
 */
function renderizarListaItensCombo(container) {
    console.log('üìã Renderizando lista de itens do combo...');
    
    if (!window.comboItems || window.comboItems.length === 0) {
        container.innerHTML = `
            <div class="combo-empty-state">
                <div style="font-size: 1.2rem; margin-bottom: 5px;">+</div>
                <div style="color: #8B95A7; font-size: 11px;">Adicione tipos de ingresso</div>
            </div>
        `;
        console.log('üìã Lista vazia renderizada');
        return;
    }
    
    let html = '';
    
    window.comboItems.forEach((item, index) => {
        const nome = item.name || item.titulo || `Ingresso ${item.ticketId || item.ingresso_id || index}`;
        const quantidade = item.quantity || item.quantidade || 1;
        
        html += `
            <div class="combo-item" data-index="${index}" style="display: flex; justify-content: space-between; align-items: center; padding: 8px 12px; margin-bottom: 8px; border: 1px solid #e0e0e0; border-radius: 4px; background: #f9f9f9;">
                <div class="combo-item-info">
                    <strong style="color: #333;">${nome}</strong>
                    <span style="color: #666; font-size: 14px; margin-left: 10px;">Qtd: ${quantidade}</span>
                </div>
                <button type="button" onclick="removerItemCombo(${index})" class="btn-remove-combo-item" style="background: #dc3545; color: white; border: none; border-radius: 4px; padding: 4px 8px; cursor: pointer; font-size: 12px;" title="Remover item">
                    üóëÔ∏è
                </button>
            </div>
        `;
    });
    
    container.innerHTML = html;
    console.log(`‚úÖ ${window.comboItems.length} itens renderizados na lista`);
}

/**
 * CARREGAMENTO DOS SELECTS DE COMBO - VERS√ÉO MELHORADA
 */
async function carregarSelectsCombo() {
    console.log('üîÑ Carregando selects de combo - VERS√ÉO MELHORADA...');
    
    const eventoId = new URLSearchParams(window.location.search).get('evento_id');
    
    if (!eventoId) {
        console.log('üìù Novo evento - sem ingressos para carregar nos selects');
        return;
    }
    
    // Verificar se os selects existem no DOM
    const selects = [
        document.getElementById('comboTicketTypeSelect'),
        document.getElementById('editComboTicketTypeSelect')
    ];
    
    const selectsExistentes = selects.filter(s => s !== null);
    
    if (selectsExistentes.length === 0) {
        console.log('‚ö†Ô∏è Nenhum select de combo encontrado no DOM ainda');
        return;
    }
    
    console.log(`üìã ${selectsExistentes.length} selects encontrados: ${selectsExistentes.map(s => s.id).join(', ')}`);
    
    try {
        console.log('üì° Fazendo requisi√ß√£o para listar ingressos...');
        
        // Buscar ingressos existentes
        const response = await fetch('/produtor/ajax/ingressos_api.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `action=listar_ingressos&evento_id=${eventoId}`
        });
        
        const textResponse = await response.text();
        console.log('üì° Resposta API para selects:', textResponse.substring(0, 200) + '...');
        
        let data;
        try {
            data = JSON.parse(textResponse);
        } catch (parseError) {
            console.error('‚ùå Erro ao parsear JSON:', parseError);
            console.error('üìÑ Resposta completa:', textResponse);
            return;
        }
        
        if (data.sucesso && data.ingressos) {
            const ingressos = data.ingressos.filter(ing => ing.tipo !== 'combo'); // N√£o incluir combos nos selects
            console.log(`üìã ${ingressos.length} ingressos n√£o-combo encontrados para os selects`);
            
            if (ingressos.length === 0) {
                console.log('‚ö†Ô∏è Nenhum ingresso n√£o-combo dispon√≠vel para adicionar aos combos');
                
                // Atualizar selects com mensagem
                selectsExistentes.forEach(select => {
                    select.innerHTML = '<option value="">Nenhum ingresso dispon√≠vel</option>';
                    console.log(`‚úÖ Select ${select.id} atualizado com mensagem de vazio`);
                });
                
                return;
            }
            
            // Atualizar cada select existente
            selectsExistentes.forEach(select => {
                console.log(`üîÑ Atualizando select: ${select.id}`);
                
                // Manter primeira op√ß√£o (placeholder)
                const primeiraOpcao = select.querySelector('option:first-child');
                const placeholderText = primeiraOpcao ? primeiraOpcao.textContent : 'Selecione um ingresso';
                
                // Limpar e recriar
                select.innerHTML = `<option value="">${placeholderText}</option>`;
                
                // Adicionar ingressos
                ingressos.forEach(ingresso => {
                    const option = document.createElement('option');
                    option.value = ingresso.id;
                    
                    const preco = ingresso.tipo === 'gratuito' ? 'Gratuito' : 'R$ ' + parseFloat(ingresso.preco || 0).toFixed(2);
                    option.textContent = `${ingresso.titulo} (${preco})`;
                    
                    select.appendChild(option);
                });
                
                console.log(`‚úÖ Select ${select.id} carregado com ${ingressos.length} op√ß√µes`);
                
                // Disparar evento para notificar que o select foi atualizado
                select.dispatchEvent(new Event('selectUpdated'));
            });
            
        } else {
            console.error('‚ùå Erro ao buscar ingressos para selects:', data.erro || 'Erro desconhecido');
            
            // Atualizar selects com mensagem de erro
            selectsExistentes.forEach(select => {
                select.innerHTML = '<option value="">Erro ao carregar ingressos</option>';
            });
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar selects:', error);
        
        // Atualizar selects com mensagem de erro
        selectsExistentes.forEach(select => {
            select.innerHTML = '<option value="">Erro de conex√£o</option>';
        });
    }
}

/**
 * INTERCEPTAR ABERTURA DE MODAIS PARA CARREGAR SELECTS - VERS√ÉO CORRIGIDA
 */
function interceptarAberturaCombos() {
    console.log('üéØ Configurando intercepta√ß√£o CORRIGIDA para modais de combo...');
    
    // Interceptar fun√ß√µes de abertura APENAS PARA EDI√á√ÉO
    const funcoesOriginais = {};
    
    ['editComboTicket', 'openModal'].forEach(nomeFuncao => {
        if (typeof window[nomeFuncao] === 'function') {
            funcoesOriginais[nomeFuncao] = window[nomeFuncao];
            
            window[nomeFuncao] = function(...args) {
                console.log(`üéØ Interceptando ${nomeFuncao} com args:`, args);
                
                // Executar fun√ß√£o original
                const resultado = funcoesOriginais[nomeFuncao].apply(this, args);
                
                // APENAS para modal de edi√ß√£o carregar selects imediatamente
                if (nomeFuncao === 'editComboTicket' || 
                    (nomeFuncao === 'openModal' && args[0] === 'editComboTicketModal')) {
                    console.log('üéØ MODAL DE EDI√á√ÉO DETECTADO - carregando selects imediatamente');
                    carregarSelectsEdicaoComboImediato();
                }
                // N√ÉO carregar automaticamente para modal de cria√ß√£o
                
                return resultado;
            };
            
            console.log(`‚úÖ ${nomeFuncao} interceptada`);
        }
    });
    
    // CONFIGURAR EVENTO DE MUDAN√áA DO LOTE NO MODAL DE CRIA√á√ÉO
    setTimeout(() => {
        configurarEventoLoteModalCriacao();
    }, 1000);
    
    // Interceptar apenas bot√µes de edi√ß√£o
    setTimeout(() => {
        const todosBotoes = document.querySelectorAll('button, .btn, [onclick]');
        todosBotoes.forEach(botao => {
            const onclick = botao.onclick?.toString() || botao.getAttribute('onclick') || '';
            
            // APENAS interceptar bot√µes de edi√ß√£o
            if (onclick.includes('editComboTicket') || onclick.includes('editTicket')) {
                botao.addEventListener('click', () => {
                    console.log('üéØ BOT√ÉO DE EDI√á√ÉO DETECTADO - carregando selects imediatamente');
                    carregarSelectsEdicaoComboImediato();
                });
            }
        });
    }, 2000);
    
    // Observer apenas para modal de edi√ß√£o
    const observer = new MutationObserver((mutations) => {
        mutations.forEach(mutation => {
            mutation.addedNodes.forEach(node => {
                if (node.nodeType === 1 && node.id === 'editComboTicketModal') {
                    console.log('üéØ MODAL DE EDI√á√ÉO DETECTADO PELO OBSERVER - carregando selects imediatamente');
                    carregarSelectsEdicaoComboImediato();
                }
            });
        });
    });
    
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
    
    console.log('‚úÖ Intercepta√ß√£o configurada APENAS para edi√ß√£o');
}

/**
 * CONFIGURAR EVENTO DE LOTE NO MODAL DE CRIA√á√ÉO
 */
function configurarEventoLoteModalCriacao() {
    console.log('üéØ Configurando evento de lote para modal de cria√ß√£o...');
    
    const selectLoteCriacao = document.getElementById('comboTicketLote');
    if (selectLoteCriacao) {
        // Remover listeners existentes
        const novoSelect = selectLoteCriacao.cloneNode(true);
        selectLoteCriacao.parentNode.replaceChild(novoSelect, selectLoteCriacao);
        
        // Adicionar novo listener
        novoSelect.addEventListener('change', function() {
            const loteId = this.value;
            console.log(`üîÑ Lote selecionado no modal de cria√ß√£o: ${loteId}`);
            
            if (loteId) {
                console.log('‚úÖ Carregando ingressos para o lote selecionado');
                setTimeout(() => {
                    carregarIngressosDoLote(loteId, 'comboTicketTypeSelect');
                }, 100);
            } else {
                // Limpar select de ingressos
                const selectIngressos = document.getElementById('comboTicketTypeSelect');
                if (selectIngressos) {
                    selectIngressos.innerHTML = '<option value="">Selecione um lote primeiro</option>';
                    console.log('üßπ Select de ingressos limpo');
                }
            }
        });
        
        console.log('‚úÖ Evento de mudan√ßa de lote configurado para modal de cria√ß√£o');
    } else {
        console.warn('‚ö†Ô∏è Select de lote n√£o encontrado para modal de cria√ß√£o');
    }
}

/**
 * CARREGAR INGRESSOS DE UM LOTE ESPEC√çFICO
 */
async function carregarIngressosDoLote(loteId, selectId) {
    console.log(`üîÑ Carregando ingressos do lote ${loteId} para select ${selectId}...`);
    
    const eventoId = new URLSearchParams(window.location.search).get('evento_id');
    
    if (!eventoId) {
        console.log('üìù Novo evento - sem ingressos para carregar');
        return;
    }
    
    const select = document.getElementById(selectId);
    if (!select) {
        console.error(`‚ùå Select ${selectId} n√£o encontrado`);
        return;
    }
    
    try {
        const response = await fetch('/produtor/ajax/ingressos_api.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `action=listar_ingressos&evento_id=${eventoId}`
        });
        
        const textResponse = await response.text();
        console.log('üì° Resposta API para lote espec√≠fico:', textResponse.substring(0, 200) + '...');
        
        let data;
        try {
            data = JSON.parse(textResponse);
        } catch (parseError) {
            console.error('‚ùå Erro ao parsear JSON:', parseError);
            return;
        }
        
        if (data.sucesso && data.ingressos) {
            // Filtrar ingressos do lote espec√≠fico e que n√£o s√£o combos
            const ingressosDoLote = data.ingressos.filter(ing => 
                ing.lote_id == loteId && ing.tipo !== 'combo'
            );
            
            console.log(`üìã ${ingressosDoLote.length} ingressos n√£o-combo encontrados para lote ${loteId}`);
            
            // Limpar e recriar op√ß√µes
            select.innerHTML = '<option value="">Selecione um ingresso</option>';
            
            if (ingressosDoLote.length === 0) {
                select.innerHTML = '<option value="">Nenhum ingresso neste lote</option>';
                return;
            }
            
            // Adicionar ingressos
            ingressosDoLote.forEach(ingresso => {
                const option = document.createElement('option');
                option.value = ingresso.id;
                
                const preco = ingresso.tipo === 'gratuito' ? 'Gratuito' : 'R$ ' + parseFloat(ingresso.preco || 0).toFixed(2);
                option.textContent = `${ingresso.titulo} (${preco})`;
                
                select.appendChild(option);
            });
            
            console.log(`‚úÖ Select ${selectId} carregado com ${ingressosDoLote.length} ingressos do lote ${loteId}`);
            
        } else {
            console.error('‚ùå Erro ao buscar ingressos do lote:', data.erro);
            select.innerHTML = '<option value="">Erro ao carregar ingressos</option>';
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar ingressos do lote:', error);
        select.innerHTML = '<option value="">Erro de conex√£o</option>';
    }
}

/**
 * CARREGAR SELECTS ESPEC√çFICO PARA EDI√á√ÉO DE COMBO - IMEDIATO
 */
async function carregarSelectsEdicaoComboImediato() {
    console.log('üî• CARREGAMENTO IMEDIATO para edi√ß√£o de combo...');
    
    // Tentativas mais agressivas para modal de edi√ß√£o
    const tentativas = [50, 100, 200, 400, 800, 1200];
    
    for (let i = 0; i < tentativas.length; i++) {
        setTimeout(async () => {
            console.log(`üî• Tentativa IMEDIATA ${i + 1}/${tentativas.length} ap√≥s ${tentativas[i]}ms`);
            
            // Verificar se modal de edi√ß√£o est√° vis√≠vel
            const modalEdicao = document.getElementById('editComboTicketModal');
            if (!modalEdicao || modalEdicao.style.display === 'none') {
                console.log('‚ö†Ô∏è Modal de edi√ß√£o n√£o vis√≠vel, pulando tentativa');
                return;
            }
            
            await carregarSelectsCombo();
            
            // Verificar especificamente o select de edi√ß√£o
            const selectEdicao = document.getElementById('editComboTicketTypeSelect');
            if (selectEdicao && selectEdicao.options.length > 1) {
                console.log(`‚úÖ Select de edi√ß√£o carregado com sucesso na tentativa ${i + 1}`);
                console.log(`üìä Op√ß√µes carregadas: ${selectEdicao.options.length - 1}`);
                return;
            }
        }, tentativas[i]);
    }
}

/**
 * Carregar selects com m√∫ltiplas tentativas
 */
async function carregarSelectsComMultiplasTentativas() {
    console.log('üîÑ Iniciando carregamento com m√∫ltiplas tentativas...');
    
    const tentativas = [100, 300, 500, 1000, 2000];
    
    for (let i = 0; i < tentativas.length; i++) {
        setTimeout(async () => {
            console.log(`üîÑ Tentativa ${i + 1}/${tentativas.length} ap√≥s ${tentativas[i]}ms`);
            await carregarSelectsCombo();
            
            // Verificar se os selects foram carregados com sucesso
            const selectsCarregados = verificarSelectsCarregados();
            if (selectsCarregados) {
                console.log(`‚úÖ Selects carregados com sucesso na tentativa ${i + 1}`);
                return;
            }
        }, tentativas[i]);
    }
}

/**
 * Verificar se os selects foram carregados com sucesso
 */
function verificarSelectsCarregados() {
    const selects = [
        document.getElementById('comboTicketTypeSelect'),
        document.getElementById('editComboTicketTypeSelect')
    ];
    
    let carregados = 0;
    
    selects.forEach(select => {
        if (select && select.options.length > 1) { // Mais de 1 op√ß√£o (placeholder + op√ß√µes reais)
            carregados++;
        }
    });
    
    console.log(`üìä Status dos selects: ${carregados}/${selects.filter(s => s).length} carregados`);
    
    return carregados > 0;
}

/**
 * FUN√á√ÉO PARA ADICIONAR ITEM AO COMBO (caso n√£o exista)
 */
if (typeof window.addItemToCombo === 'undefined') {
    window.addItemToCombo = function() {
        console.log('‚ûï addItemToCombo chamada');
        
        const select = document.getElementById('comboTicketTypeSelect');
        const quantityInput = document.getElementById('comboItemQuantity');
        
        if (!select || !quantityInput) {
            console.error('‚ùå Elementos do combo n√£o encontrados');
            return;
        }
        
        const ingressoId = select.value;
        const quantidade = parseInt(quantityInput.value) || 1;
        
        if (!ingressoId) {
            alert('Por favor, selecione um tipo de ingresso');
            return;
        }
        
        if (quantidade < 1 || quantidade > 10) {
            alert('Quantidade deve ser entre 1 e 10');
            return;
        }
        
        // Verificar se j√° existe
        if (!window.comboItems) {
            window.comboItems = [];
        }
        
        const jaExiste = window.comboItems.find(item => 
            (item.ticketId && item.ticketId == ingressoId) || 
            (item.ingresso_id && item.ingresso_id == ingressoId)
        );
        
        if (jaExiste) {
            alert('Este ingresso j√° foi adicionado ao combo');
            return;
        }
        
        // Obter nome do ingresso
        const selectedOption = select.options[select.selectedIndex];
        const nomeIngresso = selectedOption ? selectedOption.textContent : `Ingresso ${ingressoId}`;
        
        // Adicionar item
        const novoItem = {
            ticketId: ingressoId,
            quantity: quantidade,
            name: nomeIngresso,
            price: '0',
            type: 'unknown',
            ingresso_id: parseInt(ingressoId),
            quantidade: quantidade,
            titulo: nomeIngresso
        };
        
        window.comboItems.push(novoItem);
        
        console.log('‚úÖ Item adicionado ao combo:', novoItem);
        console.log('üì¶ comboItems atual:', window.comboItems);
        
        // Limpar campos
        select.value = '';
        quantityInput.value = '';
        
        // Atualizar interface
        atualizarInterfaceCombo();
    };
}

/**
 * FUN√á√ÉO PARA ADICIONAR ITEM AO COMBO DE EDI√á√ÉO (caso n√£o exista)
 */
if (typeof window.addItemToEditCombo === 'undefined') {
    window.addItemToEditCombo = function() {
        console.log('‚ûï addItemToEditCombo chamada');
        
        const select = document.getElementById('editComboTicketTypeSelect');
        const quantityInput = document.getElementById('editComboItemQuantity');
        
        if (!select || !quantityInput) {
            console.error('‚ùå Elementos do combo de edi√ß√£o n√£o encontrados');
            return;
        }
        
        const ingressoId = select.value;
        const quantidade = parseInt(quantityInput.value) || 1;
        
        if (!ingressoId) {
            alert('Por favor, selecione um tipo de ingresso');
            return;
        }
        
        if (quantidade < 1 || quantidade > 10) {
            alert('Quantidade deve ser entre 1 e 10');
            return;
        }
        
        // Usar mesma l√≥gica do addItemToCombo
        window.addItemToCombo.call(this);
    };
}

/**
 * Inicializa√ß√£o
 */
function inicializar() {
    console.log('üöÄ Inicializando fix espec√≠fico dos combos...');
    
    // Interceptar abertura de modais
    interceptarAberturaCombos();
    
    // Carregar selects se estivermos editando evento
    const eventoId = new URLSearchParams(window.location.search).get('evento_id');
    if (eventoId) {
        setTimeout(() => {
            carregarSelectsCombo();
        }, 1000);
        
        // Tentativas adicionais para garantir carregamento
        setTimeout(() => {
            carregarSelectsComMultiplasTentativas();
        }, 3000);
    }
    
    // Fun√ß√£o global para for√ßar carregamento manual
    window.forcarCarregamentoSelectsCombo = function() {
        console.log('üîß For√ßando carregamento manual dos selects...');
        carregarSelectsComMultiplasTentativas();
    };
    
    // Fun√ß√£o global para for√ßar carregamento espec√≠fico para edi√ß√£o
    window.forcarCarregamentoSelectsEdicao = function() {
        console.log('üî• For√ßando carregamento IMEDIATO para edi√ß√£o...');
        carregarSelectsEdicaoComboImediato();
    };
    
    // Fun√ß√£o global para debug
    window.debugSelectsCombo = function() {
        const selects = [
            document.getElementById('comboTicketTypeSelect'),
            document.getElementById('editComboTicketTypeSelect')
        ];
        
        console.log('üîç Debug dos selects de combo:');
        selects.forEach(select => {
            if (select) {
                console.log(`  ${select.id}: ${select.options.length} op√ß√µes`);
                for (let i = 0; i < select.options.length; i++) {
                    console.log(`    ${i}: "${select.options[i].text}" (value: ${select.options[i].value})`);
                }
            } else {
                console.log(`  Select n√£o encontrado no DOM`);
            }
        });
        
        const eventoId = new URLSearchParams(window.location.search).get('evento_id');
        console.log(`  Evento ID: ${eventoId}`);
        console.log(`  ComboItems:`, window.comboItems);
        
        // Verificar qual modal est√° vis√≠vel
        const modalCriacao = document.getElementById('comboTicketModal');
        const modalEdicao = document.getElementById('editComboTicketModal');
        
        console.log(`  Modal cria√ß√£o vis√≠vel: ${modalCriacao ? modalCriacao.style.display : 'n√£o encontrado'}`);
        console.log(`  Modal edi√ß√£o vis√≠vel: ${modalEdicao ? modalEdicao.style.display : 'n√£o encontrado'}`);
    };
    
    console.log('‚úÖ Fix espec√≠fico dos combos inicializado');
    console.log('üí° Use window.forcarCarregamentoSelectsCombo() para carregar manualmente');
    console.log('üîç Use window.debugSelectsCombo() para debug');
}

// Auto-inicializar
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', inicializar);
} else {
    inicializar();
}

console.log('‚úÖ COMBO-FIX-ESPECIFICO.JS carregado!');
console.log('üîß Fun√ß√µes implementadas:');
console.log('  1. ‚úÖ removerItemCombo(index) - remove item do combo');
console.log('  2. ‚úÖ carregarSelectsCombo() - carrega op√ß√µes dos selects');
console.log('  3. ‚úÖ carregarSelectsEdicaoComboImediato() - carregamento agressivo para edi√ß√£o');
console.log('  4. ‚úÖ addItemToCombo() - adiciona item se n√£o existir');
console.log('  5. ‚úÖ Intercepta√ß√£o de modais para atualiza√ß√£o autom√°tica');
console.log('üí° Fun√ß√µes manuais dispon√≠veis:');
console.log('  - window.forcarCarregamentoSelectsCombo() - carregamento normal');
console.log('  - window.forcarCarregamentoSelectsEdicao() - carregamento para edi√ß√£o');
console.log('  - window.debugSelectsCombo() - debug completo');
