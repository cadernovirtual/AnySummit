// Corre√ß√£o espec√≠fica para bot√µes de edi√ß√£o de combo
// Este arquivo deve ser carregado AP√ìS a renderiza√ß√£o da lista de ingressos

(function() {
    console.log('üé≠ Aplicando corre√ß√£o de bot√µes para combos...');

    // Fun√ß√£o para detectar se um elemento √© um combo
    function isComboTicket(ticketElement) {
        // Verificar se tem badge de combo
        const comboBadge = ticketElement.querySelector('.ticket-type-badge.combo, [style*="background: #9C27B0"], [style*="background:#9C27B0"]');
        if (comboBadge) return true;

        // Verificar se tem texto "COMBO" ou "(Combo)"
        const ticketText = ticketElement.textContent;
        if (ticketText.includes('COMBO') || ticketText.includes('(Combo)')) return true;

        // Verificar dataset
        const ticketData = ticketElement.ticketData;
        if (ticketData && (ticketData.type === 'combo' || ticketData.tipo === 'combo')) return true;

        // Verificar atributos dataset
        if (ticketElement.dataset.tipo === 'combo' || ticketElement.dataset.type === 'combo') return true;

        return false;
    }

    // Fun√ß√£o para extrair ID do ingresso do bot√£o
    function extractTicketId(buttonElement) {
        const onclick = buttonElement.getAttribute('onclick');
        if (!onclick) return null;

        // Extrair ID do onclick="editTicket(123)" ou editTicket('123')
        const match = onclick.match(/editTicket\s*\(\s*['"]?(\d+)['"]?\s*\)/);
        return match ? match[1] : null;
    }

    // Fun√ß√£o para corrigir bot√µes de combo
    function fixComboButtons() {
        console.log('üîß Verificando bot√µes de edi√ß√£o de combo...');

        // Buscar todos os bot√µes de editar
        const editButtons = document.querySelectorAll('button[onclick*="editTicket"], [onclick*="editTicket"]');
        
        editButtons.forEach(button => {
            // Encontrar o elemento pai do ingresso
            const ticketElement = button.closest('.ticket-item');
            if (!ticketElement) return;

            // Verificar se √© um combo
            if (isComboTicket(ticketElement)) {
                const ticketId = extractTicketId(button);
                if (ticketId) {
                    // Substituir editTicket por editComboTicket
                    const newOnclick = `editComboTicket(${ticketId})`;
                    button.setAttribute('onclick', newOnclick);
                    
                    console.log(`‚úÖ Bot√£o de combo corrigido: editTicket(${ticketId}) ‚Üí editComboTicket(${ticketId})`);
                }
            }
        });
    }

    // Fun√ß√£o para observar mudan√ßas no DOM e aplicar corre√ß√µes
    function startObserver() {
        const ticketList = document.getElementById('ticketList');
        if (!ticketList) {
            console.warn('‚ö†Ô∏è Lista de ingressos n√£o encontrada');
            return;
        }

        // Observer para mudan√ßas na lista
        const observer = new MutationObserver(function(mutations) {
            let hasNewTickets = false;
            
            mutations.forEach(function(mutation) {
                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                    for (let node of mutation.addedNodes) {
                        if (node.nodeType === 1 && (node.classList.contains('ticket-item') || node.querySelector('.ticket-item'))) {
                            hasNewTickets = true;
                            break;
                        }
                    }
                }
            });

            if (hasNewTickets) {
                console.log('üÜï Novos ingressos detectados, verificando combos...');
                setTimeout(fixComboButtons, 100); // Pequeno delay para garantir que o DOM esteja atualizado
            }
        });

        observer.observe(ticketList, {
            childList: true,
            subtree: true
        });

        console.log('üëÅÔ∏è Observer ativo para corre√ß√£o autom√°tica de bot√µes');
    }

    // Aplicar corre√ß√µes ao carregar
    document.addEventListener('DOMContentLoaded', function() {
        fixComboButtons();
        startObserver();
    });

    // Se o documento j√° estiver carregado
    if (document.readyState === 'loading') {
        // Ainda carregando, aguardar DOMContentLoaded
    } else {
        // DOM j√° carregado
        fixComboButtons();
        startObserver();
    }

    // Fun√ß√£o global para ser chamada manualmente se necess√°rio
    window.fixComboButtons = fixComboButtons;

    console.log('‚úÖ Corre√ß√£o de bot√µes de combo configurada');
})();
