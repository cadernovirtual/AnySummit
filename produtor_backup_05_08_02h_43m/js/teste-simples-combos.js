/**
 * TESTE SIMPLES - CORRE√á√ÉO DE COMBOS
 * Vers√£o simplificada para debug dos combos
 */

console.log('üß™ TESTE COMBOS - Carregando...');

// Interceptar createComboTicket para debug
document.addEventListener('DOMContentLoaded', function() {
    console.log('üß™ DOM carregado - preparando intercepta√ß√µes...');
    
    setTimeout(function() {
        
        // 1. INTERCEPTAR createComboTicket
        if (window.createComboTicket) {
            const original = window.createComboTicket;
            window.createComboTicket = function() {
                console.log('üß™ createComboTicket INTERCEPTADO!');
                
                // Coletar dados b√°sicos
                const titulo = document.getElementById('comboTicketTitle')?.value || '';
                const precoRaw = document.getElementById('comboTicketPrice')?.value || '0';
                
                console.log('üß™ Dados coletados:');
                console.log('  - T√≠tulo:', titulo);
                console.log('  - Pre√ßo raw:', precoRaw);
                
                // Converter pre√ßo
                let preco = 0;
                if (precoRaw) {
                    const precoLimpo = precoRaw.replace(/[R$\s]/g, '').replace(',', '.');
                    preco = parseFloat(precoLimpo) || 0;
                    console.log('  - Pre√ßo convertido:', preco);
                }
                
                // Valida√ß√µes b√°sicas
                if (!titulo.trim()) {
                    console.log('‚ùå T√≠tulo vazio');
                    alert('T√≠tulo √© obrigat√≥rio!');
                    return;
                }
                
                if (preco <= 0) {
                    console.log('‚ùå Pre√ßo inv√°lido');
                    alert('Pre√ßo deve ser maior que zero!');
                    return;
                }
                
                console.log('‚úÖ Valida√ß√µes OK - chamando fun√ß√£o original');
                
                // Chamar fun√ß√£o original
                return original.apply(this, arguments);
            };
            
            console.log('‚úÖ createComboTicket interceptado');
        } else {
            console.log('‚ö†Ô∏è createComboTicket n√£o encontrado');
        }
        
        // 2. INTERCEPTAR salvarComboImediatoNoBanco se existir
        if (window.salvarComboImediatoNoBanco) {
            const originalSalvar = window.salvarComboImediatoNoBanco;
            window.salvarComboImediatoNoBanco = function(dados) {
                console.log('üß™ salvarComboImediatoNoBanco INTERCEPTADO!');
                console.log('üß™ Dados recebidos:', dados);
                
                // Verificar se pre√ßo est√° correto
                if (dados && dados.preco) {
                    console.log('‚úÖ Pre√ßo nos dados:', dados.preco);
                } else {
                    console.log('‚ùå Pre√ßo ausente ou zero nos dados!');
                }
                
                // Chamar fun√ß√£o original
                return originalSalvar.call(this, dados);
            };
            
            console.log('‚úÖ salvarComboImediatoNoBanco interceptado');
        }
        
        // 3. MONITORAR ERROS
        window.addEventListener('error', function(e) {
            if (e.message && e.message.includes('combo')) {
                console.error('üß™ ERRO RELACIONADO A COMBO:', e.message);
                console.error('üß™ Arquivo:', e.filename);
                console.error('üß™ Linha:', e.lineno);
            }
        });
        
        console.log('üß™ Intercepta√ß√µes configuradas!');
        
    }, 1500);
});

console.log('‚úÖ Teste de combos carregado!');