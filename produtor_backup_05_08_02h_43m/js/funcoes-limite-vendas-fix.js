/**
 * CORRE√á√ÉO DEFINITIVA - FUN√á√ïES DE LIMITE DE VENDAS
 * Resolve os problemas de fun√ß√µes n√£o definidas:
 * 1. confirmarLimiteVendas() 
 * 2. handleControleVendasChange()
 * 3. btnConfirmarLimite onclick
 */

console.log('üîß FUNCOES-LIMITE-VENDAS-FIX.JS carregando...');

/**
 * PROBLEMA 1: confirmarLimiteVendas n√£o est√° definida
 * Solu√ß√£o: Definir globalmente com fallback robusto
 */
window.confirmarLimiteVendas = async function() {
    console.log('‚úÖ confirmarLimiteVendas() executando...');
    
    const inputLimite = document.getElementById('limiteVendas');
    const eventoId = new URLSearchParams(window.location.search).get('evento_id');
    
    if (!inputLimite) {
        console.error('‚ùå Campo limiteVendas n√£o encontrado');
        alert('Erro: Campo de limite n√£o encontrado.');
        return;
    }
    
    const limite = parseInt(inputLimite.value);
    
    if (!limite || limite < 1) {
        alert('‚ö†Ô∏è Por favor, informe uma lota√ß√£o m√°xima v√°lida (maior que 0).');
        inputLimite.focus();
        return;
    }
    
    try {
        // Fazer requisi√ß√£o para salvar o limite
        const response = await fetch('/produtor/ajax/wizard_evento.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `action=salvar_limite_vendas&evento_id=${eventoId || ''}&controlar_limite_vendas=1&limite_vendas=${limite}`
        });
        
        const data = await response.json();
        
        if (data.sucesso) {
            console.log('‚úÖ Limite salvo com sucesso');
            alert(`‚úÖ Lota√ß√£o m√°xima de ${limite} pessoas confirmada!`);
            
            // Habilitar bot√£o de criar lotes por quantidade
            const botaoCriar = document.getElementById('btnCriarLoteQuantidade');
            if (botaoCriar) {
                botaoCriar.disabled = false;
                botaoCriar.style.opacity = '1';
                botaoCriar.style.cursor = 'pointer';
                console.log('‚úÖ Bot√£o criar lote por quantidade habilitado');
            }
            
            // Esconder campo de confirma√ß√£o
            const campoLimite = document.getElementById('campoLimiteVendas');
            if (campoLimite) {
                campoLimite.style.display = 'none';
            }
            
        } else {
            console.error('‚ùå Erro ao salvar limite:', data.erro);
            alert('‚ùå Erro ao salvar limite: ' + (data.erro || 'Erro desconhecido'));
        }
        
    } catch (error) {
        console.error('‚ùå Erro na requisi√ß√£o:', error);
        alert('‚ùå Erro de conex√£o ao salvar limite.');
    }
};

/**
 * PROBLEMA 2: handleControleVendasChange n√£o funciona corretamente
 * Solu√ß√£o: Redefine fun√ß√£o com l√≥gica correta de verifica√ß√£o
 */
window.handleControleVendasChange = async function(event) {
    const isChecked = event.target.checked;
    console.log('üéõÔ∏è handleControleVendasChange:', isChecked ? 'ATIVADO' : 'DESATIVADO');
    
    if (isChecked) {
        // MARCANDO: Mostrar campos de limita√ß√£o
        mostrarCamposLimitacao();
        await atualizarBancoDados(1); // Salvar no banco que est√° ativado
        
    } else {
        // DESMARCANDO: Verificar se pode desmarcar
        console.log('üîç Verificando se pode desmarcar...');
        
        // Bloquear temporariamente a mudan√ßa
        event.target.checked = true;
        
        const podeDesmarcar = await verificarSePodesDesmarcar();
        
        if (podeDesmarcar) {
            console.log('‚úÖ Pode desmarcar - processando...');
            event.target.checked = false;
            esconderCamposLimitacao();
            await atualizarBancoDados(0); // Salvar no banco que est√° desativado
        } else {
            console.log('‚ùå N√£o pode desmarcar - mantendo marcado');
            event.target.checked = true;
            // Campos permanecem vis√≠veis
        }
    }
};

/**
 * Mostrar campos de limita√ß√£o quando checkbox marcado
 */
function mostrarCamposLimitacao() {
    console.log('üëÅÔ∏è Mostrando campos de limita√ß√£o...');
    
    const campoLimite = document.getElementById('campoLimiteVendas');
    const btnConfirmar = document.getElementById('btnConfirmarLimite');
    
    if (campoLimite) {
        campoLimite.style.display = 'block';
        console.log('‚úÖ Campo limite vis√≠vel');
    }
    
    if (btnConfirmar) {
        btnConfirmar.style.display = 'inline-block';
        console.log('‚úÖ Bot√£o confirmar vis√≠vel');
    }
}

/**
 * Esconder campos de limita√ß√£o quando checkbox desmarcado
 */
function esconderCamposLimitacao() {
    console.log('üëÅÔ∏è Escondendo campos de limita√ß√£o...');
    
    const campoLimite = document.getElementById('campoLimiteVendas');
    const btnConfirmar = document.getElementById('btnConfirmarLimite');
    const inputLimite = document.getElementById('limiteVendas');
    
    if (campoLimite) {
        campoLimite.style.display = 'none';
        console.log('‚úÖ Campo limite escondido');
    }
    
    if (btnConfirmar) {
        btnConfirmar.style.display = 'none';
        console.log('‚úÖ Bot√£o confirmar escondido');
    }
    
    if (inputLimite) {
        inputLimite.value = '';
        console.log('‚úÖ Valor limite limpo');
    }
}

/**
 * Verificar se pode desmarcar o checkbox
 */
async function verificarSePodesDesmarcar() {
    console.log('üîç Verificando se existem lotes por quantidade...');
    
    try {
        // Carregar lotes do banco
        let lotes = [];
        if (typeof window.carregarLotesDoBanco === 'function') {
            lotes = await window.carregarLotesDoBanco();
        } else {
            console.warn('‚ö†Ô∏è Fun√ß√£o carregarLotesDoBanco n√£o encontrada');
            return true; // Se n√£o conseguir verificar, permitir desmarcar
        }
        
        const lotesPorQuantidade = lotes.filter(l => l.tipo === 'quantidade' || l.tipo === 'percentual');
        
        if (lotesPorQuantidade.length === 0) {
            console.log('‚úÖ Nenhum lote por quantidade - pode desmarcar');
            return true;
        }
        
        console.log(`üìä Encontrados ${lotesPorQuantidade.length} lotes por quantidade`);
        
        // Verificar se h√° ingressos nos lotes
        let temIngressos = false;
        for (const lote of lotesPorQuantidade) {
            const ingressos = await verificarIngressosNoLote(lote.id);
            if (ingressos) {
                temIngressos = true;
                break;
            }
        }
        
        if (temIngressos) {
            // H√° ingressos - n√£o pode desmarcar
            alert('‚ùå Para desmarcar essa op√ß√£o voc√™ precisa excluir todos os lotes por quantidade de vendas e seus respectivos ingressos.');
            return false;
        }
        
        // N√£o h√° ingressos - perguntar se quer excluir lotes
        const nomes = lotesPorQuantidade.map(l => l.nome).join(', ');
        const confirmacao = confirm(
            `Para desmarcar o controle de limite ser√° necess√°rio excluir os seguintes lotes:\n\n${nomes}\n\nDeseja continuar?`
        );
        
        if (!confirmacao) {
            console.log('‚ùå Usu√°rio cancelou');
            return false;
        }
        
        // Excluir lotes
        console.log('üóëÔ∏è Excluindo lotes por quantidade...');
        for (const lote of lotesPorQuantidade) {
            await excluirLote(lote.id);
        }
        
        // Renomear lotes restantes
        await renomearLotesSequencial();
        
        // Atualizar interface
        if (typeof window.renderizarLotesUnificado === 'function') {
            setTimeout(() => window.renderizarLotesUnificado(), 500);
        }
        
        console.log('‚úÖ Lotes exclu√≠dos - pode desmarcar');
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar lotes:', error);
        alert('‚ùå Erro ao verificar lotes: ' + error.message);
        return false;
    }
}

/**
 * Verificar se h√° ingressos no lote
 */
async function verificarIngressosNoLote(loteId) {
    try {
        const response = await fetch('/produtor/ajax/wizard_evento.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `action=verificar_ingressos_lote&lote_id=${loteId}`
        });
        
        const data = await response.json();
        return data.sucesso && data.tem_ingressos;
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar ingressos:', error);
        return false;
    }
}

/**
 * Excluir lote espec√≠fico
 */
async function excluirLote(loteId) {
    const response = await fetch('/produtor/ajax/wizard_evento.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: `action=excluir_lote_especifico&lote_id=${loteId}`
    });
    
    const data = await response.json();
    if (!data.sucesso) {
        throw new Error(data.erro || 'Erro ao excluir lote');
    }
}

/**
 * Renomear lotes sequencialmente
 */
async function renomearLotesSequencial() {
    const response = await fetch('/produtor/ajax/wizard_evento.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: `action=renomear_lotes_sequencial`
    });
    
    const data = await response.json();
    if (!data.sucesso) {
        throw new Error(data.erro || 'Erro ao renomear lotes');
    }
}

/**
 * Atualizar banco de dados com estado do controle
 */
async function atualizarBancoDados(valor) {
    const eventoId = new URLSearchParams(window.location.search).get('evento_id');
    
    if (!eventoId) {
        console.log('‚ÑπÔ∏è Modo novo evento - sem atualiza√ß√£o de banco');
        return;
    }
    
    try {
        const response = await fetch('/produtor/ajax/wizard_evento.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `action=salvar_controle_limite&evento_id=${eventoId}&controlar_limite_vendas=${valor}`
        });
        
        const data = await response.json();
        if (data.sucesso) {
            console.log(`‚úÖ Controle de limite atualizado no banco: ${valor}`);
        } else {
            console.error('‚ùå Erro ao atualizar banco:', data.erro);
        }
        
    } catch (error) {
        console.error('‚ùå Erro na requisi√ß√£o de atualiza√ß√£o:', error);
    }
}

/**
 * PROBLEMA 3: Garantir que btnConfirmarLimite funcione
 * Configurar onclick diretamente no DOM quando dispon√≠vel
 */
function configurarBotaoConfirmar() {
    const btnConfirmar = document.getElementById('btnConfirmarLimite');
    
    if (btnConfirmar) {
        console.log('üîò Configurando onclick do btnConfirmarLimite...');
        
        // Remover onclick anterior e definir novo
        btnConfirmar.onclick = null;
        btnConfirmar.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üîò btnConfirmarLimite clicado - executando confirmarLimiteVendas');
            window.confirmarLimiteVendas();
        });
        
        console.log('‚úÖ btnConfirmarLimite configurado');
    } else {
        console.warn('‚ö†Ô∏è btnConfirmarLimite n√£o encontrado');
    }
}

/**
 * Configurar estado inicial baseado no checkbox
 */
function configurarEstadoInicial() {
    setTimeout(() => {
        const checkbox = document.getElementById('controlar_limite_vendas');
        
        if (checkbox) {
            const isChecked = checkbox.checked;
            console.log(`üîÑ Estado inicial do checkbox: ${isChecked ? 'MARCADO' : 'DESMARCADO'}`);
            
            if (isChecked) {
                mostrarCamposLimitacao();
            } else {
                esconderCamposLimitacao();
            }
        }
        
        // Configurar bot√£o confirmar
        configurarBotaoConfirmar();
        
    }, 1000);
}

/**
 * Inicializa√ß√£o
 */
function inicializar() {
    console.log('üöÄ Inicializando corre√ß√µes de limite de vendas...');
    
    configurarEstadoInicial();
    
    // Observar mudan√ßas no DOM para configurar bot√£o quando aparecer
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.addedNodes) {
                mutation.addedNodes.forEach(function(node) {
                    if (node.id === 'btnConfirmarLimite') {
                        console.log('üîò btnConfirmarLimite adicionado ao DOM - configurando...');
                        configurarBotaoConfirmar();
                    }
                });
            }
        });
    });
    
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
}

// Auto-inicializar
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', inicializar);
} else {
    inicializar();
}

console.log('‚úÖ FUNCOES-LIMITE-VENDAS-FIX.JS carregado!');
console.log('üîß Fun√ß√µes dispon√≠veis globalmente:');
console.log('  - window.confirmarLimiteVendas()');
console.log('  - window.handleControleVendasChange(event)');
