/**
 * CORRE√á√ÉO DEFINITIVA: IDs de edi√ß√£o ap√≥s salvamento
 * Resolve problema de edi√ß√£o de itens j√° salvos no banco
 */

document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Corre√ß√£o definitiva de IDs carregada');
    
    // Interceptar fun√ß√£o editItem para buscar por ID correto
    const originalEditItem = window.editItem;
    if (originalEditItem) {
        window.editItem = function(ticketId) {
            console.log(`üîç Tentando editar item: ${ticketId}`);
            
            // Primeiro tentar buscar pelo ID exato
            let ticketElement = document.querySelector(`[data-ticket-id="${ticketId}"]`);
            
            if (!ticketElement || !ticketElement.ticketData) {
                console.log(`‚ùå Item n√£o encontrado com ID ${ticketId}, buscando por ID real...`);
                
                // Buscar por ingresso_id no ticketData
                const allItems = document.querySelectorAll('.ticket-item');
                for (const item of allItems) {
                    if (item.ticketData && (
                        item.ticketData.id == ticketId || 
                        item.ticketData.ingresso_id == ticketId ||
                        item.dataset.ingressoId == ticketId
                    )) {
                        ticketElement = item;
                        console.log(`‚úÖ Item encontrado por ID real:`, item.ticketData);
                        break;
                    }
                }
            }
            
            if (ticketElement && ticketElement.ticketData) {
                console.log(`‚úÖ Editando item encontrado:`, ticketElement.ticketData);
                return originalEditItem.call(this, ticketId);
            } else {
                console.error(`‚ùå Item ${ticketId} realmente n√£o encontrado`);
                alert('Item n√£o encontrado. Recarregue a p√°gina e tente novamente.');
            }
        };
    }
    
    // Interceptar fun√ß√£o de edi√ß√£o de lote
    const originalEditarLoteImediato = window.editarLoteImediato;
    if (originalEditarLoteImediato) {
        window.editarLoteImediato = function(loteId) {
            console.log(`üîç Tentando editar lote: ${loteId}`);
            
            // Buscar lote nos dados globais ou DOM
            const loteItems = document.querySelectorAll('.lote-item');
            let loteEncontrado = null;
            
            for (const item of loteItems) {
                const dadosLote = item.loteData || {};
                if (dadosLote.id == loteId || item.dataset.loteId == loteId) {
                    loteEncontrado = dadosLote;
                    console.log(`‚úÖ Lote encontrado:`, dadosLote);
                    break;
                }
            }
            
            if (loteEncontrado) {
                return originalEditarLoteImediato.call(this, loteId);
            } else {
                console.error(`‚ùå Lote ${loteId} n√£o encontrado`);
                alert('Lote n√£o encontrado. Recarregue a p√°gina e tente novamente.');
            }
        };
    }
    
    // Fun√ß√£o para sincronizar IDs ap√≥s salvamento
    function sincronizarIdsAposSalvamento() {
        const ticketItems = document.querySelectorAll('.ticket-item');
        
        ticketItems.forEach(item => {
            if (item.ticketData && item.ticketData.id) {
                const idReal = item.ticketData.id;
                
                // Atualizar todos os atributos com ID real
                item.dataset.ticketId = idReal;
                item.dataset.ingressoId = idReal;
                item.setAttribute('data-ticket-id', idReal);
                item.setAttribute('data-ingresso-id', idReal);
                
                // Atualizar bot√µes de edi√ß√£o
                const editBtn = item.querySelector('[onclick*="editItem"]');
                if (editBtn) {
                    editBtn.setAttribute('onclick', `editItem('${idReal}')`);
                }
                
                const deleteBtn = item.querySelector('[onclick*="deleteItem"]');
                if (deleteBtn) {
                    deleteBtn.setAttribute('onclick', `deleteItem('${idReal}')`);
                }
                
                console.log(`üîÑ Item sincronizado com ID real: ${idReal}`);
            }
        });
        
        // Sincronizar lotes tamb√©m
        const loteItems = document.querySelectorAll('.lote-item');
        loteItems.forEach(item => {
            if (item.loteData && item.loteData.id) {
                const idReal = item.loteData.id;
                
                item.dataset.loteId = idReal;
                item.setAttribute('data-lote-id', idReal);
                
                // Atualizar bot√µes de lote
                const editBtn = item.querySelector('[onclick*="editarLoteImediato"]');
                if (editBtn) {
                    editBtn.setAttribute('onclick', `editarLoteImediato('${idReal}')`);
                }
                
                console.log(`üîÑ Lote sincronizado com ID real: ${idReal}`);
            }
        });
    }
    
    // Executar sincroniza√ß√£o periodicamente
    setInterval(sincronizarIdsAposSalvamento, 3000);
    
    // Executar ap√≥s carregamento inicial
    setTimeout(sincronizarIdsAposSalvamento, 2000);
    
    console.log('‚úÖ Corre√ß√£o de IDs de edi√ß√£o ativada');
});
