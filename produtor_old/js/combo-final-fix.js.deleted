// Corre√ß√µes FOR√áADAS para combos - executar ap√≥s todos os outros scripts
(function() {
    'use strict';
    
    console.log('üîß Iniciando corre√ß√µes for√ßadas de combo...');
    
    // Aguardar um pouco para garantir que todos os scripts carregaram
    setTimeout(function() {
        console.log('üéØ Aplicando corre√ß√µes de combo...');
        
        // FOR√áAR sobrescrita da fun√ß√£o addComboToList
        window.addComboToList = function(title, quantity, price, comboData, totalItems, description, loteId, loteNome, startDate, endDate) {
            console.log('‚úÖ Usando fun√ß√£o addComboToList CORRIGIDA');
            
            if (!window.ticketCount) window.ticketCount = 0;
            window.ticketCount++;
            
            const ticketList = document.getElementById('ticketList');
            if (!ticketList) {
                console.error('Lista de ingressos n√£o encontrada!');
                return;
            }

            const cleanPrice = parseFloat(price.replace(/[R$\s\.]/g, '').replace(',', '.'));
            const taxaServico = comboData.taxaServico !== false;
            const tax = taxaServico ? (cleanPrice * 0.1) : 0;
            const totalPrice = cleanPrice + tax;
            
            // Formata√ß√£o de valores
            const totalFormatted = `R$ ${totalPrice.toFixed(2).replace('.', ',')}`;
            const taxFormatted = `R$ ${tax.toFixed(2).replace('.', ',')}`;
            const receiveFormatted = `R$ ${cleanPrice.toFixed(2).replace('.', ',')}`;
            
            // Formatar datas
            const formatDate = (dateStr) => {
                if (!dateStr) return 'N/A';
                const date = new Date(dateStr);
                return date.toLocaleDateString('pt-BR') + ' ' + 
                       date.toLocaleTimeString('pt-BR', {hour: '2-digit', minute: '2-digit'});
            };
            
            // Extrair informa√ß√µes do lote
            let tipoLote = 'Por Data';
            let loteInfo = loteNome || 'lote 1';
            
            const ticketItem = document.createElement('div');
            ticketItem.className = 'ticket-item';
            ticketItem.dataset.ticketId = window.ticketCount;
            ticketItem.dataset.loteId = loteId;
            ticketItem.dataset.comboData = JSON.stringify(comboData);
            
            // IMPORTANTE: N√£o incluir "Inclui:" na descri√ß√£o
            // Verificar se j√° tem uma descri√ß√£o personalizada
            let hasCustomDescription = false;
            let cleanDescription = '';
            
            if (description && description.trim() !== '') {
                // Remover "Inclui:" se estiver no in√≠cio
                cleanDescription = description.replace(/^Inclui:\s*/i, '').trim();
                
                // Se ap√≥s remover "Inclui:" ainda sobrar algo diferente dos itens, √© descri√ß√£o customizada
                const itemsText = comboData.itens.map(item => `${item.quantidade}x ${item.nome}`).join(', ');
                if (cleanDescription && cleanDescription !== itemsText) {
                    hasCustomDescription = true;
                }
            }
            
            // HTML do ticket - FORMATO ID√äNTICO AO INGRESSO PAGO
            ticketItem.innerHTML = `
                <div class="ticket-header">
                    <div class="ticket-title">
                        <span class="ticket-name">${title}</span>
                        <span class="ticket-type-badge combo" style="background: #9C27B0; color: white; padding: 2px 6px; border-radius: 4px; font-size: 11px; font-weight: normal;">
                            (Combo)
                        </span>
                        <span class="ticket-lote-info" style="font-size: 11px; color: #666; margin-left: 10px;">
                            ${loteInfo} - ${tipoLote} (${formatDate(startDate)} at√© ${formatDate(endDate)})
                        </span>
                    </div>
                    <div class="ticket-actions">
                        <button class="btn-icon" onclick="editTicket(${window.ticketCount})" title="Editar">‚úèÔ∏è</button>
                        <button class="btn-icon" onclick="removeTicket(${window.ticketCount})" title="Remover">üóëÔ∏è</button>
                    </div>
                </div>
                <div class="ticket-details">
                    <div class="ticket-info">
                        <span>Quantidade: <strong>${quantity}</strong></span>
                        <span>Pre√ßo: <strong class="ticket-buyer-price">${totalFormatted}</strong></span>
                        <span>Taxa: <strong>${taxFormatted}</strong></span>
                        <span>Voc√™ recebe: <strong>${receiveFormatted}</strong></span>
                    </div>
                    
                    ${hasCustomDescription ? `
                    <div class="ticket-description" style="margin-top: 10px; padding: 8px 12px; background: #f8f9fa; border-radius: 6px; font-size: 13px; color: #666;">
                        ${cleanDescription}
                    </div>
                    ` : ''}
                    
                    <div class="combo-items" style="margin-top: 10px; padding: 8px 12px; background: #f0f4ff; border-radius: 6px; border-left: 3px solid #9C27B0; font-size: 13px;">
                        <strong style="color: #9C27B0;">Inclui:</strong>
                        <span style="color: #555; margin-left: 5px;">
                            ${comboData.itens.map(item => `${item.quantidade}x ${item.nome}`).join(', ')}
                        </span>
                    </div>
                </div>
            `;
            
            ticketList.appendChild(ticketItem);
            
            // Armazenar dados para edi√ß√£o
            ticketItem.ticketData = {
                type: 'combo',
                title: title,
                quantity: quantity,
                price: cleanPrice,
                description: hasCustomDescription ? cleanDescription : '',
                comboData: comboData,
                saleStart: startDate,
                saleEnd: endDate,
                loteId: loteId,
                loteName: loteNome,
                taxaServico: taxaServico
            };
            
            console.log('‚úÖ Combo adicionado com formata√ß√£o CORRETA');
        };
        
        // Tamb√©m corrigir quando o combo √© criado
        const originalCreateCombo = window.createComboTicket;
        window.createComboTicket = function() {
            console.log('üéØ Interceptando cria√ß√£o de combo...');
            
            // Pegar a descri√ß√£o antes de criar
            const descField = document.getElementById('comboTicketDescription');
            if (descField && descField.value) {
                // Limpar "Inclui:" se existir
                descField.value = descField.value.replace(/^Inclui:\s*/i, '').trim();
            }
            
            // Chamar fun√ß√£o original
            if (originalCreateCombo) {
                originalCreateCombo.call(this);
            }
        };
        
        console.log('‚úÖ Corre√ß√µes de combo aplicadas com sucesso!');
        
    }, 500); // Aguardar meio segundo para garantir que tudo carregou
    
})();

// Executar tamb√©m quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîÑ DOM carregado - reaplicando corre√ß√µes de combo...');
    
    // Reexecutar as corre√ß√µes para garantir
    setTimeout(function() {
        // Se ainda houver combos com formato errado, corrigi-los
        const combos = document.querySelectorAll('.ticket-item[data-combo-data]');
        combos.forEach(combo => {
            const hasDoubleInclui = combo.innerHTML.includes('Inclui:') && 
                                   combo.innerHTML.includes('<div class="ticket-description">Inclui:');
            if (hasDoubleInclui) {
                console.log('üîß Corrigindo combo com "Inclui:" duplicado');
                const description = combo.querySelector('.ticket-description');
                if (description && description.textContent.trim().startsWith('Inclui:')) {
                    description.remove();
                }
            }
        });
    }, 1000);
});