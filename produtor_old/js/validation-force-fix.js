// For√ßa a aplica√ß√£o das corre√ß√µes de valida√ß√£o
console.log('üî® For√ßando corre√ß√£o de valida√ß√£o do wizard...');

// Vari√°vel para armazenar se j√° aplicamos a corre√ß√£o final
let finalCorrectionApplied = false;

// Fun√ß√£o para for√ßar override imediato
function forceOverrideNextStep() {
    console.log('‚ö° Aplicando override tempor√°rio de nextStep');
    
    // Salvar refer√™ncia da fun√ß√£o atual para debug
    const oldNextStep = window.nextStep;
    console.log('Fun√ß√£o nextStep anterior:', oldNextStep ? oldNextStep.toString().substring(0, 100) + '...' : 'undefined');
    
    // Override tempor√°rio que tenta aplicar a corre√ß√£o final
    window.nextStep = function() {
        console.log('üöÄ [TEMPOR√ÅRIO] nextStep executado');
        
        // Se a corre√ß√£o final j√° foi aplicada, n√£o fazer nada aqui
        if (finalCorrectionApplied) {
            console.log('‚ùå Fun√ß√£o tempor√°ria chamada mas corre√ß√£o final j√° foi aplicada!');
            return;
        }
        
        console.log('‚è∏Ô∏è Aguardando validateStep para aplicar valida√ß√£o...');
        
        // Tentar aplicar a corre√ß√£o final imediatamente
        if (typeof window.validateStep === 'function') {
            console.log('‚úÖ validateStep encontrada! Aplicando corre√ß√£o final agora...');
            applyFinalCorrection();
            // Chamar a nova fun√ß√£o
            if (window.nextStep && window.nextStep !== arguments.callee) {
                window.nextStep();
            }
        }
    };
}

// Aplicar override tempor√°rio
forceOverrideNextStep();

// Fun√ß√£o para aplicar a corre√ß√£o final
function applyFinalCorrection() {
    if (finalCorrectionApplied) return;
    
    console.log('üéØ Aplicando corre√ß√£o final de valida√ß√£o...');
    
    // Garantir wizardState
    if (!window.wizardState) {
        const currentStepElement = document.querySelector('.step.active');
        const currentStepNumber = currentStepElement ? 
            parseInt(currentStepElement.dataset.step) : 1;
            
        window.wizardState = {
            currentStep: currentStepNumber,
            totalSteps: 8
        };
        console.log('‚úÖ wizardState criado:', window.wizardState);
    }
    
    // Salvar refer√™ncia da fun√ß√£o validateStep
    const originalValidateStep = window.validateStep;
    
    // Override final do nextStep
    window.nextStep = function() {
        console.log('üöÄ [FOR√áADO] nextStep executado - step atual:', window.wizardState.currentStep);
        
        const currentStep = window.wizardState.currentStep;
        
        // Usar a validateStep original
        const isValid = originalValidateStep(currentStep);
        console.log('üìã [FOR√áADO] Valida√ß√£o do step', currentStep, ':', isValid);
        
        if (isValid) {
            if (currentStep < window.wizardState.totalSteps) {
                window.wizardState.currentStep = currentStep + 1;
                
                // Atualizar display
                if (typeof window.updateStepDisplay === 'function') {
                    window.updateStepDisplay();
                } else {
                    updateStepDisplayForced();
                }
                
                console.log('‚úÖ [FOR√áADO] Avan√ßou para step:', window.wizardState.currentStep);
                
                // Salvar dados
                if (typeof window.saveWizardData === 'function') {
                    window.saveWizardData();
                }
            }
        } else {
            console.log('‚ùå [FOR√áADO] Valida√ß√£o falhou - permanece no step:', currentStep);
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
    };
    
    finalCorrectionApplied = true;
    console.log('‚úÖ Corre√ß√£o final aplicada com sucesso!');
}

// Aguardar um momento para garantir que todos os scripts foram carregados
setTimeout(() => {
    console.log('üîç Verificando estado atual:');
    console.log('- validateStep existe?', typeof window.validateStep);
    console.log('- wizardState existe?', typeof window.wizardState);
    console.log('- nextStep existe?', typeof window.nextStep);
    
    // Fun√ß√£o para aguardar validateStep
    function waitForValidateStep(callback, attempts = 0) {
        if (typeof window.validateStep === 'function') {
            console.log('‚úÖ validateStep encontrada ap√≥s', attempts, 'tentativas');
            callback();
        } else if (attempts < 30) { // 3 segundos
            setTimeout(() => waitForValidateStep(callback, attempts + 1), 100);
        } else {
            console.error('‚ùå validateStep n√£o foi encontrada ap√≥s 3 segundos!');
            // Tentar encontrar em outros lugares
            console.log('üîç Procurando validateStep em outros locais...');
            if (typeof validateStep === 'function') {
                window.validateStep = validateStep;
                console.log('‚úÖ validateStep encontrada no escopo local e exposta!');
                callback();
            }
        }
    }
    
    // Aplicar corre√ß√µes
    waitForValidateStep(() => {
        applyFinalCorrection();
    });
    
}, 1000); // Aguardar 1 segundo para garantir que tudo carregou

// Fun√ß√£o para atualizar display for√ßadamente
function updateStepDisplayForced() {
    const currentStep = window.wizardState.currentStep;
    console.log('üìä [FOR√áADO] Atualizando display para step:', currentStep);
    
    // Atualizar cards
    document.querySelectorAll('.section-card').forEach(card => {
        const stepNumber = parseInt(card.dataset.stepContent);
        card.classList.toggle('active', stepNumber === currentStep);
        card.classList.toggle('prev', stepNumber < currentStep);
    });
    
    // Atualizar steps
    document.querySelectorAll('.step').forEach(step => {
        const stepNumber = parseInt(step.dataset.step);
        step.classList.toggle('active', stepNumber === currentStep);
        step.classList.toggle('completed', stepNumber < currentStep);
    });
    
    // Atualizar linha de progresso
    const progressLine = document.getElementById('progressLine');
    if (progressLine) {
        const progressPercentage = ((currentStep - 1) / 7) * 100;
        progressLine.style.width = progressPercentage + '%';
    }
    
    window.scrollTo({ top: 0, behavior: 'smooth' });
}