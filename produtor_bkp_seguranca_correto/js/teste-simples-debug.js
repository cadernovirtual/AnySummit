// === TESTE SIMPLES - DEVE APARECER NO CONSOLE ===
console.log('üö® SCRIPT DE TESTE CARREGADO - SE VOC√ä V√ä ISSO, O ARQUIVO EST√Å FUNCIONANDO');

// Verificar se a fun√ß√£o existe
if (window.coletarDadosModalPagoFinal) {
    console.log('‚úÖ Fun√ß√£o coletarDadosModalPagoFinal EXISTE');
} else {
    console.log('‚ùå Fun√ß√£o coletarDadosModalPagoFinal N√ÉO EXISTE');
}

// Tentar interceptar de forma mais direta
setTimeout(() => {
    console.log('üîÑ Tentando interceptar createPaidTicket...');
    
    if (window.createPaidTicket) {
        const originalCreatePaidTicket = window.createPaidTicket;
        window.createPaidTicket = function() {
            console.log('üö® INTERCEPTADO! createPaidTicket foi chamado');
            
            // Verificar todos os campos ANTES da valida√ß√£o
            console.log('üìã VALORES DOS CAMPOS:');
            
            const campos = {
                titulo: document.getElementById('paidTicketTitle')?.value,
                quantidade: document.getElementById('paidTicketQuantity')?.value,
                preco: document.getElementById('paidTicketPrice')?.value,
                lote: document.getElementById('paidTicketLote')?.value,
                inicio: document.getElementById('paidSaleStart')?.value,
                fim: document.getElementById('paidSaleEnd')?.value,
                min: document.getElementById('paidMinQuantity')?.value,
                max: document.getElementById('paidMaxQuantity')?.value,
                descricao: document.getElementById('paidTicketDescription')?.value
            };
            
            Object.keys(campos).forEach(key => {
                console.log(`${key}: "${campos[key]}"`);
            });
            
            // Verificar elementos que podem n√£o existir
            console.log('üîç VERIFICA√á√ÉO DE ELEMENTOS DOM:');
            Object.keys(campos).forEach(key => {
                const elementId = key === 'titulo' ? 'paidTicketTitle' :
                                key === 'quantidade' ? 'paidTicketQuantity' :
                                key === 'preco' ? 'paidTicketPrice' :
                                key === 'lote' ? 'paidTicketLote' :
                                key === 'inicio' ? 'paidSaleStart' :
                                key === 'fim' ? 'paidSaleEnd' :
                                key === 'min' ? 'paidMinQuantity' :
                                key === 'max' ? 'paidMaxQuantity' :
                                'paidTicketDescription';
                
                const element = document.getElementById(elementId);
                console.log(`${key} (${elementId}): ${element ? '‚úÖ EXISTS' : '‚ùå NOT FOUND'}`);
            });
            
            // Chamar fun√ß√£o original e capturar resultado
            console.log('üîÑ Chamando fun√ß√£o original...');
            const resultado = originalCreatePaidTicket.apply(this, arguments);
            console.log('‚úÖ Fun√ß√£o original executada, resultado:', resultado);
            
            return resultado;
        };
        console.log('‚úÖ createPaidTicket interceptado com sucesso');
    } else {
        console.log('‚ùå createPaidTicket n√£o encontrado');
    }
    
    // Tamb√©m interceptar a fun√ß√£o problem√°tica se existir
    if (window.coletarDadosModalPagoFinal) {
        const originalColeta = window.coletarDadosModalPagoFinal;
        window.coletarDadosModalPagoFinal = function() {
            console.log('üîç INTERCEPTANDO coletarDadosModalPagoFinal...');
            
            const resultado = originalColeta.apply(this, arguments);
            console.log('üìä Resultado da coleta de dados:', resultado);
            
            if (!resultado) {
                console.log('‚ùå coletarDadosModalPagoFinal retornou NULL - dados inv√°lidos');
            }
            
            return resultado;
        };
        console.log('‚úÖ coletarDadosModalPagoFinal interceptado');
    }
}, 1000);
