/**
 * Helper para criar dados de teste no wizard
 * Facilita o teste do sistema de recupera√ß√£o
 */

(function() {
    'use strict';
    
    console.log('üß™ Test Helper carregado');
    
    // Fun√ß√£o para criar dados de teste
    window.criarDadosTeste = function(step = 3) {
        const dadosTeste = {
            currentStep: step,
            eventName: "Evento de Teste " + new Date().toLocaleTimeString(),
            classification: "16",
            category: "negocios",
            startDateTime: "2025-03-15T09:00",
            endDateTime: "2025-03-15T18:00",
            venueName: "Local de Teste",
            addressSearch: "Rua Teste, 123",
            street: "Rua Teste",
            number: "123",
            neighborhood: "Centro",
            city: "Goi√¢nia",
            state: "GO",
            cep: "74000-000",
            eventDescription: "<p>Descri√ß√£o do evento de teste</p>",
            corFundo: "#ff0000",
            timestamp: new Date().getTime()
        };
        
        // Salvar no cookie
        const cookieValue = encodeURIComponent(JSON.stringify(dadosTeste));
        document.cookie = `eventoWizard=${cookieValue}; path=/; max-age=604800`;
        
        console.log('‚úÖ Dados de teste criados!');
        console.log('üìã Dados:', dadosTeste);
        console.log('üç™ Cookie salvo com sucesso');
        console.log('üí° Recarregue a p√°gina para ver o dialog de recupera√ß√£o');
        
        return dadosTeste;
    };
    
    // Fun√ß√£o para verificar cookie
    window.verificarCookie = function() {
        const cookies = document.cookie.split(';');
        let wizardData = null;
        
        for (const cookie of cookies) {
            const trimmed = cookie.trim();
            if (trimmed.startsWith('eventoWizard=')) {
                wizardData = trimmed.substring(13);
                break;
            }
        }
        
        if (wizardData) {
            try {
                const decoded = decodeURIComponent(wizardData);
                const parsed = JSON.parse(decoded);
                console.log('‚úÖ Cookie encontrado:', parsed);
                return parsed;
            } catch (e) {
                console.error('‚ùå Erro ao decodificar cookie:', e);
            }
        } else {
            console.log('‚ùå Nenhum cookie eventoWizard encontrado');
        }
        
        return null;
    };
    
    // Fun√ß√£o para for√ßar dialog
    window.forcarDialog = function() {
        // Primeiro criar dados de teste se n√£o existirem
        const cookie = verificarCookie();
        if (!cookie) {
            criarDadosTeste();
        }
        
        // Resetar flags
        window._recoveryDialogShown = false;
        window._recoveryInProgress = false;
        
        // Chamar fun√ß√£o de recupera√ß√£o
        if (window.checkAndRestoreWizardDataUnified) {
            window.checkAndRestoreWizardDataUnified();
        } else if (window.checkAndRestoreWizardData) {
            window.checkAndRestoreWizardData();
        } else {
            console.error('‚ùå Nenhuma fun√ß√£o de recupera√ß√£o encontrada!');
        }
    };
    
    // Fun√ß√£o para testar dialog customizado
    window.testarDialog = function() {
        if (window.customDialog && window.customDialog.confirm) {
            window.customDialog.confirm({
                title: '‚úÖ Teste de Dialog',
                message: 'Este √© um teste do dialog customizado.<br>Os bot√µes devem funcionar corretamente.',
                confirmText: 'Confirmar',
                cancelText: 'Cancelar',
                onConfirm: () => {
                    console.log('‚úÖ Bot√£o Confirmar clicado!');
                    alert('Confirmado!');
                },
                onCancel: () => {
                    console.log('‚ùå Bot√£o Cancelar clicado!');
                    alert('Cancelado!');
                }
            });
        } else {
            console.error('‚ùå customDialog n√£o est√° dispon√≠vel!');
        }
    };
    
    console.log('üí° Comandos dispon√≠veis:');
    console.log('   criarDadosTeste() - Cria dados de teste no cookie (step 3)');
    console.log('   criarDadosTeste(1) - Cria dados de teste no step 1');
    console.log('   criarDadosTeste(5) - Cria dados de teste no step 5');
    console.log('   verificarCookie() - Verifica se h√° dados salvos');
    console.log('   forcarDialog() - For√ßa exibi√ß√£o do dialog de recupera√ß√£o');
    console.log('   testarRecuperacao() - Testa o sistema de recupera√ß√£o');
    console.log('   testarDialog() - Testa o dialog customizado');
    console.log('   limparTudo() - Limpa todos os dados salvos');
    
})();
